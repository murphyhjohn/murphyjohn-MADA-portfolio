[
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html",
    "href": "fitting-exercise/code/fitting-exercise.html",
    "title": "fitting-exercise",
    "section": "",
    "text": "# load packages\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(gtsummary)\n\nWarning: package 'gtsummary' was built under R version 4.4.3\n\n\n\n# load data\ndat &lt;- read.csv(\n  here::here(\"fitting-exercise/data/Mavoglurant_A2121_nmpk.csv\")\n  )\n\nnames(dat) &lt;- tolower(names(dat))\n\n\n\n\n\n# plot time by dv for each id, stratified by dose\nplot &lt;- ggplot(dat) +\n  geom_line(aes(x=time, y=dv, group=id)) +\n  facet_wrap(~dose)\n\nprint(plot)\n\n\n\n\n\n\n\n\n\n\n\n\n# keep only obs where occ=1\ndat1 &lt;- dat %&gt;%\n  filter(occ == 1)\n\n\n# exclude obs where time=0, sum dv for each id\ndat2 &lt;- dat1 %&gt;%\n  filter(time != 0) %&gt;%\n  group_by(id) %&gt;%\n  summarize(\n    Y = sum(dv)\n  )\n\n# create df with time=0 obs only\ndat3 &lt;- dat1 %&gt;%\n  filter(time == 0)\n\n# join by id\ndat4 &lt;- full_join(x=dat2, y=dat3, by=\"id\")\n\n\n# convert race and sex to factors\n# keep only Y, dose, age, sex, race, wt, ht\ndat5 &lt;- dat4 %&gt;%\n  mutate(\n    race = factor(race),\n    sex = factor(sex)\n  ) %&gt;%\n  select(\n    Y, dose, age, sex, race, wt, ht\n  )\n\nstr(dat5)\n\ntibble [120 × 7] (S3: tbl_df/tbl/data.frame)\n $ Y   : num [1:120] 2691 2639 2150 1789 3126 ...\n $ dose: num [1:120] 25 25 25 25 25 25 25 25 25 25 ...\n $ age : int [1:120] 42 24 31 46 41 27 23 20 23 28 ...\n $ sex : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ race: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 1 1 2 2 1 4 2 1 ...\n $ wt  : num [1:120] 94.3 80.4 71.8 77.4 64.3 ...\n $ ht  : num [1:120] 1.77 1.76 1.81 1.65 1.56 ...\n\n\n\n\n\n\n# participant demographics by dose\ntable1 &lt;- dat5 %&gt;%\n  gtsummary::tbl_summary(\n    include = c(age, sex, race, wt, ht),\n    by = dose\n  ) %&gt;%\n  gtsummary::as_kable()\n\nprint(table1)\n\n\n\n|**Characteristic** |  **25**  N = 59   | **37.5**  N = 12  |  **50**  N = 49   |\n|:------------------|:-----------------:|:-----------------:|:-----------------:|\n|age                |    30 (26, 40)    |    38 (27, 45)    |    32 (26, 39)    |\n|sex                |                   |                   |                   |\n|1                  |     49 (83%)      |     10 (83%)      |     45 (92%)      |\n|2                  |     10 (17%)      |      2 (17%)      |     4 (8.2%)      |\n|race               |                   |                   |                   |\n|1                  |     32 (54%)      |     10 (83%)      |     32 (65%)      |\n|2                  |     21 (36%)      |      2 (17%)      |     13 (27%)      |\n|7                  |     1 (1.7%)      |      0 (0%)       |     1 (2.0%)      |\n|88                 |     5 (8.5%)      |      0 (0%)       |     3 (6.1%)      |\n|wt                 |    81 (72, 90)    |    80 (72, 86)    |    83 (75, 93)    |\n|ht                 | 1.77 (1.70, 1.82) | 1.74 (1.68, 1.82) | 1.78 (1.73, 1.81) |\n\n\n\n# plot Y by dose\nplot1 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=factor(dose), y=Y))\n\nprint(plot1)\n\n\n\n\n\n\n\n\nBoxplot of dose by Y should 2 individuals of dose 25 with higher Y values, 1 individual od dose 50 with higher Y value.\n\n# plot Y by age\nplot2 &lt;- ggplot(dat5) +\n  geom_point(aes(x=age, y=Y))\n\nprint(plot2)\n\n\n\n\n\n\n\n\nScatterplot of age by Y appears randomly distributed.\n\n# plot Y by sex\nplot3 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=sex, y=Y))\n\nprint(plot3)\n\n\n\n\n\n\n\n\nBoxplot of sex by Y shows one individual of sex 1 and one individual of sex 2 with higher values of Y.\n\n# distribution of Y\nhist1 &lt;- ggplot(dat5) +\n  geom_histogram(aes(Y))\n\nprint(hist1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of Y is right-skewed with some high-value outliers.\n\n# distribution of dose\nbar1 &lt;- ggplot(dat5) +\n  geom_bar(aes(factor(dose)))\n\nprint(bar1)\n\n\n\n\n\n\n\n\nBar plot of dose shows that more individuals recieve dose 25 or 50 than dose 37.5.\n\n# distribution of age\nhist2 &lt;- ggplot(dat5) +\n  geom_histogram(aes(age))\n\nprint(hist2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of age appears multimodal. Most individuals are either late-20s or late-30s.\n\n# distribution of sex\nbar2 &lt;- ggplot(dat5) +\n  geom_bar(aes(sex))\n\nprint(bar2)\n\n\n\n\n\n\n\n\nBar plot of sex shows that most individuals are of sex 1.\n\n# distribution of race\nbar3 &lt;- ggplot(dat5) +\n  geom_bar(aes(race))\n\nprint(bar3)\n\n\n\n\n\n\n\n\nBar plot of race shows that most individuals are of race 1. Some are of race 2 and few are of races 7 and 88.\n\n# distribution of wt\nhist3 &lt;- ggplot(dat5) +\n  geom_histogram(aes(wt))\n\nprint(hist3)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of weight shows a normal distribution.\n\n# distribution of ht\nhist4 &lt;- ggplot(dat5) +\n  geom_histogram(aes(ht))\n\nprint(hist4)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of height shows normal to slightly left-skewed distribution.\n\nplot4 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=sex, y=wt))\n\nprint(plot4)\n\n\n\n\n\n\n\n\nBoxplot of sex by height shows that sex 1 has larger values for weight than sex 2\n\nplot5 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=sex, y=ht))\n\nprint(plot5)\n\n\n\n\n\n\n\n\nBoxplot of sex by height shows that sex 1 has larger values for height than sex 2\n\n# pair plot\npairs(dat5)\n\n\n\n\n\n\n\n\nPair plot shows general relationships between variables. Y seems positively associated with dose. Weight and height show a positive linear relationship.\n\n\n\n\n\n\n# linear model to Y using dose\nfit1 &lt;- parsnip::linear_reg() %&gt;%\n  parsnip::fit(\n    Y ~ dose, \n    data=dat5\n  )\n\nbroom::tidy(fit1)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    323.     199.        1.62 1.07e- 1\n2 dose            58.2      5.19     11.2  2.69e-20\n\n# predict Y\nfit1_pred &lt;- predict(\n  fit1,\n  new_data=dat5\n)\n\n# combine real data with predictions\nfit1_result &lt;- dat5 %&gt;%\n  select(Y, dose) %&gt;%\n  bind_cols(fit1_pred)\n\n# calculate rmse\nfit1_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        666.\n\n# calculate R squared\nfit1_result %&gt;%\n  yardstick::rsq(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rsq     standard       0.516\n\n\nRMSE = 666 and R-squared = 0.516\n\n# linear model to Y using all predictors\nfit2 &lt;- parsnip::linear_reg() %&gt;%\n  parsnip::fit(\n    Y ~ dose + age + sex + race + wt + ht, \n    data=dat5\n  )\n\nbroom::tidy(fit2)\n\n# A tibble: 9 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  3387.     1835.       1.85  6.76e- 2\n2 dose           59.9       4.88    12.3   2.05e-22\n3 age             3.16      7.82     0.403 6.88e- 1\n4 sex2         -358.      217.      -1.65  1.02e- 1\n5 race2         155.      129.       1.21  2.31e- 1\n6 race7        -405.      448.      -0.904 3.68e- 1\n7 race88        -53.5     245.      -0.219 8.27e- 1\n8 wt            -23.0       6.40    -3.60  4.71e- 4\n9 ht           -748.     1104.      -0.678 4.99e- 1\n\n# predict Y\nfit2_pred &lt;- predict(\n  fit2,\n  new_data=dat5\n)\n\n# combine real data with predictions\nfit2_result &lt;- dat5 %&gt;%\n  select(Y, dose, age, sex, race, wt, ht) %&gt;%\n  bind_cols(fit2_pred)\n\n# calculate rmse\nfit2_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        591.\n\n# calculate R squared\nfit2_result %&gt;%\n  yardstick::rsq(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rsq     standard       0.619\n\n\nRMSE = 591 and R-squared = 0.619\nThe full model, with all predictors included, has a lower RMSE, which indicated lower error, then the reduced model, with dose as the only predictor. The full model also has a higher R-squared value, indicating a better fit then the reduced model.\n\n\n\n\n# logistic model to sex using dose\nfit3 &lt;- parsnip::logistic_reg() %&gt;%\n  parsnip::fit(\n    sex ~ dose, \n    data=dat5\n  )\n\nbroom::tidy(fit3)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)  -0.765     0.854     -0.896   0.370\n2 dose         -0.0318    0.0243    -1.31    0.192\n\n# predict sex\nfit3_pred &lt;- predict(\n  fit3,\n  new_data=dat5\n)\n\n# get prediction probabilities\nfit3_prob &lt;- predict(\n  fit3,\n  new_data = dat5,\n  type = \"prob\"\n)\n\n# combine real data with predictions\nfit3_result &lt;- dat5 %&gt;%\n  select(sex, dose) %&gt;%\n  bind_cols(fit3_pred, fit3_prob)\n\n# compute accuracy\nyardstick::accuracy(\n  fit3_result, \n  truth = sex,\n  estimate = .pred_class\n)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.867\n\n# compute ROC-AUC\nyardstick::roc_auc(\n  fit3_result, \n  truth=sex, \n  .pred_1\n)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.592\n\n\nThe model classification accuracy is about 86.7%.\nThe model has a ROC-AUC of 0.592 indicating predictive performance is low, just slightly better than random guessing.\n\n# logistic model to sex using all predictors\nfit4 &lt;- parsnip::logistic_reg() %&gt;%\n  parsnip::fit(\n    sex ~ Y + dose + age + race + wt + ht, \n    data=dat5\n  )\n\nbroom::tidy(fit4)\n\n# A tibble: 9 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  60.3     18.0         3.34   0.000824\n2 Y            -0.00104  0.000963   -1.08   0.280   \n3 dose         -0.0308   0.0776     -0.396  0.692   \n4 age           0.0834   0.0607      1.37   0.170   \n5 race2        -1.93     1.37       -1.40   0.161   \n6 race7         0.118    3.85        0.0306 0.976   \n7 race88       -1.50     2.19       -0.683  0.494   \n8 wt           -0.0628   0.0794     -0.791  0.429   \n9 ht          -33.2     11.1        -3.00   0.00274 \n\n# predict sex\nfit4_pred &lt;- predict(\n  fit4,\n  new_data=dat5\n)\n\n# get prediction probabilities\nfit4_prob &lt;- predict(\n  fit4,\n  new_data = dat5,\n  type = \"prob\"\n)\n\n# combine real data with predictions\nfit4_result &lt;- dat5 %&gt;%\n  select(sex, Y, dose, age, race, wt, ht) %&gt;%\n  bind_cols(fit4_pred, fit4_prob)\n\n# compute accuracy\nyardstick::accuracy(\n  fit4_result, \n  truth = sex,\n  estimate = .pred_class\n)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.942\n\n# compute ROC-AUC\nyardstick::roc_auc(\n  fit4_result, \n  truth=sex, \n  .pred_1\n)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.980\n\n\nThe model classification accuracy is about 94.7%.\nThe model has a ROC-AUC of 0.980 indicating overall good predictive performance."
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#setup",
    "href": "fitting-exercise/code/fitting-exercise.html#setup",
    "title": "fitting-exercise",
    "section": "",
    "text": "# load packages\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(gtsummary)\n\nWarning: package 'gtsummary' was built under R version 4.4.3\n\n\n\n# load data\ndat &lt;- read.csv(\n  here::here(\"fitting-exercise/data/Mavoglurant_A2121_nmpk.csv\")\n  )\n\nnames(dat) &lt;- tolower(names(dat))"
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#initial-eda",
    "href": "fitting-exercise/code/fitting-exercise.html#initial-eda",
    "title": "fitting-exercise",
    "section": "",
    "text": "# plot time by dv for each id, stratified by dose\nplot &lt;- ggplot(dat) +\n  geom_line(aes(x=time, y=dv, group=id)) +\n  facet_wrap(~dose)\n\nprint(plot)"
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#initial-processing",
    "href": "fitting-exercise/code/fitting-exercise.html#initial-processing",
    "title": "fitting-exercise",
    "section": "",
    "text": "# keep only obs where occ=1\ndat1 &lt;- dat %&gt;%\n  filter(occ == 1)\n\n\n# exclude obs where time=0, sum dv for each id\ndat2 &lt;- dat1 %&gt;%\n  filter(time != 0) %&gt;%\n  group_by(id) %&gt;%\n  summarize(\n    Y = sum(dv)\n  )\n\n# create df with time=0 obs only\ndat3 &lt;- dat1 %&gt;%\n  filter(time == 0)\n\n# join by id\ndat4 &lt;- full_join(x=dat2, y=dat3, by=\"id\")\n\n\n# convert race and sex to factors\n# keep only Y, dose, age, sex, race, wt, ht\ndat5 &lt;- dat4 %&gt;%\n  mutate(\n    race = factor(race),\n    sex = factor(sex)\n  ) %&gt;%\n  select(\n    Y, dose, age, sex, race, wt, ht\n  )\n\nstr(dat5)\n\ntibble [120 × 7] (S3: tbl_df/tbl/data.frame)\n $ Y   : num [1:120] 2691 2639 2150 1789 3126 ...\n $ dose: num [1:120] 25 25 25 25 25 25 25 25 25 25 ...\n $ age : int [1:120] 42 24 31 46 41 27 23 20 23 28 ...\n $ sex : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ race: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 1 1 2 2 1 4 2 1 ...\n $ wt  : num [1:120] 94.3 80.4 71.8 77.4 64.3 ...\n $ ht  : num [1:120] 1.77 1.76 1.81 1.65 1.56 ..."
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#eda",
    "href": "fitting-exercise/code/fitting-exercise.html#eda",
    "title": "fitting-exercise",
    "section": "",
    "text": "# participant demographics by dose\ntable1 &lt;- dat5 %&gt;%\n  gtsummary::tbl_summary(\n    include = c(age, sex, race, wt, ht),\n    by = dose\n  ) %&gt;%\n  gtsummary::as_kable()\n\nprint(table1)\n\n\n\n|**Characteristic** |  **25**  N = 59   | **37.5**  N = 12  |  **50**  N = 49   |\n|:------------------|:-----------------:|:-----------------:|:-----------------:|\n|age                |    30 (26, 40)    |    38 (27, 45)    |    32 (26, 39)    |\n|sex                |                   |                   |                   |\n|1                  |     49 (83%)      |     10 (83%)      |     45 (92%)      |\n|2                  |     10 (17%)      |      2 (17%)      |     4 (8.2%)      |\n|race               |                   |                   |                   |\n|1                  |     32 (54%)      |     10 (83%)      |     32 (65%)      |\n|2                  |     21 (36%)      |      2 (17%)      |     13 (27%)      |\n|7                  |     1 (1.7%)      |      0 (0%)       |     1 (2.0%)      |\n|88                 |     5 (8.5%)      |      0 (0%)       |     3 (6.1%)      |\n|wt                 |    81 (72, 90)    |    80 (72, 86)    |    83 (75, 93)    |\n|ht                 | 1.77 (1.70, 1.82) | 1.74 (1.68, 1.82) | 1.78 (1.73, 1.81) |\n\n\n\n# plot Y by dose\nplot1 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=factor(dose), y=Y))\n\nprint(plot1)\n\n\n\n\n\n\n\n\nBoxplot of dose by Y should 2 individuals of dose 25 with higher Y values, 1 individual od dose 50 with higher Y value.\n\n# plot Y by age\nplot2 &lt;- ggplot(dat5) +\n  geom_point(aes(x=age, y=Y))\n\nprint(plot2)\n\n\n\n\n\n\n\n\nScatterplot of age by Y appears randomly distributed.\n\n# plot Y by sex\nplot3 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=sex, y=Y))\n\nprint(plot3)\n\n\n\n\n\n\n\n\nBoxplot of sex by Y shows one individual of sex 1 and one individual of sex 2 with higher values of Y.\n\n# distribution of Y\nhist1 &lt;- ggplot(dat5) +\n  geom_histogram(aes(Y))\n\nprint(hist1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of Y is right-skewed with some high-value outliers.\n\n# distribution of dose\nbar1 &lt;- ggplot(dat5) +\n  geom_bar(aes(factor(dose)))\n\nprint(bar1)\n\n\n\n\n\n\n\n\nBar plot of dose shows that more individuals recieve dose 25 or 50 than dose 37.5.\n\n# distribution of age\nhist2 &lt;- ggplot(dat5) +\n  geom_histogram(aes(age))\n\nprint(hist2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of age appears multimodal. Most individuals are either late-20s or late-30s.\n\n# distribution of sex\nbar2 &lt;- ggplot(dat5) +\n  geom_bar(aes(sex))\n\nprint(bar2)\n\n\n\n\n\n\n\n\nBar plot of sex shows that most individuals are of sex 1.\n\n# distribution of race\nbar3 &lt;- ggplot(dat5) +\n  geom_bar(aes(race))\n\nprint(bar3)\n\n\n\n\n\n\n\n\nBar plot of race shows that most individuals are of race 1. Some are of race 2 and few are of races 7 and 88.\n\n# distribution of wt\nhist3 &lt;- ggplot(dat5) +\n  geom_histogram(aes(wt))\n\nprint(hist3)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of weight shows a normal distribution.\n\n# distribution of ht\nhist4 &lt;- ggplot(dat5) +\n  geom_histogram(aes(ht))\n\nprint(hist4)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of height shows normal to slightly left-skewed distribution.\n\nplot4 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=sex, y=wt))\n\nprint(plot4)\n\n\n\n\n\n\n\n\nBoxplot of sex by height shows that sex 1 has larger values for weight than sex 2\n\nplot5 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=sex, y=ht))\n\nprint(plot5)\n\n\n\n\n\n\n\n\nBoxplot of sex by height shows that sex 1 has larger values for height than sex 2\n\n# pair plot\npairs(dat5)\n\n\n\n\n\n\n\n\nPair plot shows general relationships between variables. Y seems positively associated with dose. Weight and height show a positive linear relationship."
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#model-fitting",
    "href": "fitting-exercise/code/fitting-exercise.html#model-fitting",
    "title": "fitting-exercise",
    "section": "",
    "text": "# linear model to Y using dose\nfit1 &lt;- parsnip::linear_reg() %&gt;%\n  parsnip::fit(\n    Y ~ dose, \n    data=dat5\n  )\n\nbroom::tidy(fit1)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    323.     199.        1.62 1.07e- 1\n2 dose            58.2      5.19     11.2  2.69e-20\n\n# predict Y\nfit1_pred &lt;- predict(\n  fit1,\n  new_data=dat5\n)\n\n# combine real data with predictions\nfit1_result &lt;- dat5 %&gt;%\n  select(Y, dose) %&gt;%\n  bind_cols(fit1_pred)\n\n# calculate rmse\nfit1_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        666.\n\n# calculate R squared\nfit1_result %&gt;%\n  yardstick::rsq(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rsq     standard       0.516\n\n\nRMSE = 666 and R-squared = 0.516\n\n# linear model to Y using all predictors\nfit2 &lt;- parsnip::linear_reg() %&gt;%\n  parsnip::fit(\n    Y ~ dose + age + sex + race + wt + ht, \n    data=dat5\n  )\n\nbroom::tidy(fit2)\n\n# A tibble: 9 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  3387.     1835.       1.85  6.76e- 2\n2 dose           59.9       4.88    12.3   2.05e-22\n3 age             3.16      7.82     0.403 6.88e- 1\n4 sex2         -358.      217.      -1.65  1.02e- 1\n5 race2         155.      129.       1.21  2.31e- 1\n6 race7        -405.      448.      -0.904 3.68e- 1\n7 race88        -53.5     245.      -0.219 8.27e- 1\n8 wt            -23.0       6.40    -3.60  4.71e- 4\n9 ht           -748.     1104.      -0.678 4.99e- 1\n\n# predict Y\nfit2_pred &lt;- predict(\n  fit2,\n  new_data=dat5\n)\n\n# combine real data with predictions\nfit2_result &lt;- dat5 %&gt;%\n  select(Y, dose, age, sex, race, wt, ht) %&gt;%\n  bind_cols(fit2_pred)\n\n# calculate rmse\nfit2_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        591.\n\n# calculate R squared\nfit2_result %&gt;%\n  yardstick::rsq(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rsq     standard       0.619\n\n\nRMSE = 591 and R-squared = 0.619\nThe full model, with all predictors included, has a lower RMSE, which indicated lower error, then the reduced model, with dose as the only predictor. The full model also has a higher R-squared value, indicating a better fit then the reduced model.\n\n\n\n\n# logistic model to sex using dose\nfit3 &lt;- parsnip::logistic_reg() %&gt;%\n  parsnip::fit(\n    sex ~ dose, \n    data=dat5\n  )\n\nbroom::tidy(fit3)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)  -0.765     0.854     -0.896   0.370\n2 dose         -0.0318    0.0243    -1.31    0.192\n\n# predict sex\nfit3_pred &lt;- predict(\n  fit3,\n  new_data=dat5\n)\n\n# get prediction probabilities\nfit3_prob &lt;- predict(\n  fit3,\n  new_data = dat5,\n  type = \"prob\"\n)\n\n# combine real data with predictions\nfit3_result &lt;- dat5 %&gt;%\n  select(sex, dose) %&gt;%\n  bind_cols(fit3_pred, fit3_prob)\n\n# compute accuracy\nyardstick::accuracy(\n  fit3_result, \n  truth = sex,\n  estimate = .pred_class\n)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.867\n\n# compute ROC-AUC\nyardstick::roc_auc(\n  fit3_result, \n  truth=sex, \n  .pred_1\n)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.592\n\n\nThe model classification accuracy is about 86.7%.\nThe model has a ROC-AUC of 0.592 indicating predictive performance is low, just slightly better than random guessing.\n\n# logistic model to sex using all predictors\nfit4 &lt;- parsnip::logistic_reg() %&gt;%\n  parsnip::fit(\n    sex ~ Y + dose + age + race + wt + ht, \n    data=dat5\n  )\n\nbroom::tidy(fit4)\n\n# A tibble: 9 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  60.3     18.0         3.34   0.000824\n2 Y            -0.00104  0.000963   -1.08   0.280   \n3 dose         -0.0308   0.0776     -0.396  0.692   \n4 age           0.0834   0.0607      1.37   0.170   \n5 race2        -1.93     1.37       -1.40   0.161   \n6 race7         0.118    3.85        0.0306 0.976   \n7 race88       -1.50     2.19       -0.683  0.494   \n8 wt           -0.0628   0.0794     -0.791  0.429   \n9 ht          -33.2     11.1        -3.00   0.00274 \n\n# predict sex\nfit4_pred &lt;- predict(\n  fit4,\n  new_data=dat5\n)\n\n# get prediction probabilities\nfit4_prob &lt;- predict(\n  fit4,\n  new_data = dat5,\n  type = \"prob\"\n)\n\n# combine real data with predictions\nfit4_result &lt;- dat5 %&gt;%\n  select(sex, Y, dose, age, race, wt, ht) %&gt;%\n  bind_cols(fit4_pred, fit4_prob)\n\n# compute accuracy\nyardstick::accuracy(\n  fit4_result, \n  truth = sex,\n  estimate = .pred_class\n)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.942\n\n# compute ROC-AUC\nyardstick::roc_auc(\n  fit4_result, \n  truth=sex, \n  .pred_1\n)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.980\n\n\nThe model classification accuracy is about 94.7%.\nThe model has a ROC-AUC of 0.980 indicating overall good predictive performance."
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#setup-1",
    "href": "fitting-exercise/code/fitting-exercise.html#setup-1",
    "title": "fitting-exercise",
    "section": "Setup",
    "text": "Setup\n\n# set seed\nrngseed = 1234\n\n\n# remove race variable\ndat6 &lt;- dat5 %&gt;%\n  select(!race)\n\n\nset.seed(rngseed)\n\n# put 75% of the data into the training set \ndata_split &lt;- rsample::initial_split(dat6, prop = 3/4)\n\n# Create data frames for the two sets:\ntrain_data &lt;- rsample::training(data_split)\ntest_data  &lt;- rsample::testing(data_split)"
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#model-fitting-1",
    "href": "fitting-exercise/code/fitting-exercise.html#model-fitting-1",
    "title": "fitting-exercise",
    "section": "Model Fitting",
    "text": "Model Fitting\n\nPart 1\n\n# linear model to Y using dose\nfit5 &lt;- parsnip::linear_reg() %&gt;%\n  parsnip::fit(\n    Y ~ dose, \n    data=train_data\n  )\n\nbroom::tidy(fit5)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    535.     244.        2.19 3.08e- 2\n2 dose            53.4      6.29      8.50 4.41e-13\n\n# predict Y\nfit5_pred &lt;- predict(\n  fit5,\n  new_data=train_data\n)\n\n# combine real data with predictions\nfit5_result &lt;- train_data %&gt;%\n  select(Y, dose) %&gt;%\n  bind_cols(fit5_pred)\n\n# calculate rmse\nfit5_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        703.\n\n# calculate R squared\nfit5_result %&gt;%\n  yardstick::rsq(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rsq     standard       0.451\n\n\nRMSE = 703 and R-squared = 0.451\n\n# linear model to Y using all predictors\nfit6 &lt;- parsnip::linear_reg() %&gt;%\n  parsnip::fit(\n    Y ~ dose + age + sex + wt + ht, \n    data=train_data\n  )\n\nbroom::tidy(fit6)\n\n# A tibble: 6 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  4397.      2170.      2.03   4.59e- 2\n2 dose           55.3        5.83    9.49   6.09e-15\n3 age            -0.417      9.50   -0.0439 9.65e- 1\n4 sex2         -569.       285.     -1.99   4.95e- 2\n5 wt            -22.6        7.65   -2.96   4.00e- 3\n6 ht          -1130.      1358.     -0.832  4.08e- 1\n\n# predict Y\nfit6_pred &lt;- predict(\n  fit6,\n  new_data=train_data\n)\n\n# combine real data with predictions\nfit6_result &lt;- train_data %&gt;%\n  select(Y, dose, age, sex, wt, ht) %&gt;%\n  bind_cols(fit6_pred)\n\n# calculate rmse\nfit6_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        627.\n\n# calculate R squared\nfit6_result %&gt;%\n  yardstick::rsq(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rsq     standard       0.562\n\n\nRMSE = 627 and R-squared = 0.562\n\n# compute rmse of null model\n\nnull &lt;- parsnip::null_model() %&gt;%\n  parsnip::set_engine(\"parsnip\") %&gt;%\n  parsnip::set_mode(\"regression\") %&gt;%\n  parsnip::fit(Y ~ ., data = train_data)\n\n# predict Y\nnull_pred &lt;- predict(\n  null,\n  new_data=train_data\n)\n\n# combine real data with predictions\nnull_result &lt;- train_data %&gt;%\n  select(Y) %&gt;%\n  bind_cols(null_pred)\n\n# calculate rmse\nnull_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        948.\n\n\nRMSE = 948\n\nResults\nThe RMSE of the full model is the lowest, at 627. This indicates that the full model is predicting values closer to the actual data than both the null and univariate models.\n\n\n\nPart 2\n\n# setup\n\n# fit model with resampling\nset.seed(rngseed)\n\n# define linear model specification\nmodel_spec &lt;- parsnip::linear_reg() %&gt;% \n  parsnip::set_engine(\"lm\") %&gt;% \n  parsnip::set_mode(\"regression\")\n\n# define null model specification\nnull_spec &lt;- parsnip::null_model() %&gt;%\n  parsnip::set_engine(\"parsnip\") %&gt;%\n  parsnip::set_mode(\"regression\")\n\n# create folds\nfolds &lt;- rsample::vfold_cv(train_data, v = 10)\n\n\n# linear model to Y using dose\nfit_wf1 &lt;- workflows::workflow() %&gt;%\n  workflows::add_model(model_spec) %&gt;%\n  workflows::add_formula(Y ~ dose)\n\nfit_rs1 &lt;- fit_wf1 %&gt;%\n  tune::fit_resamples(folds)\n\nWarning: package 'parsnip' was built under R version 4.4.2\n\ntune::collect_metrics(fit_rs1)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   691.       10 67.5    Preprocessor1_Model1\n2 rsq     standard     0.512    10  0.0592 Preprocessor1_Model1\n\n\nRMSE = 691, SE = 67.5; R-squared = 0.512, SE = 0.0592\n\n# linear model to Y using all predictors\nfit_wf2 &lt;- workflows::workflow() %&gt;%\n  workflows::add_model(model_spec) %&gt;%\n  workflows::add_formula(Y ~ dose + age + sex + wt + ht)\n\nfit_rs2 &lt;- fit_wf2 %&gt;%\n  tune::fit_resamples(folds)\n\ntune::collect_metrics(fit_rs2)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   646.       10 64.8    Preprocessor1_Model1\n2 rsq     standard     0.573    10  0.0686 Preprocessor1_Model1\n\n\nRMSE = 646, SE = 64.8; R-squared = 0.573, SE = 0.0686\n\n# null model\nfit_wf_null &lt;- workflows::workflow() %&gt;%\n  workflows::add_model(null_spec) %&gt;%\n  workflows::add_formula(Y ~ .)\n\nfit_rs_null &lt;- fit_wf_null %&gt;%\n  tune::fit_resamples(folds)\n\n→ A | warning: A correlation computation is required, but `estimate` is constant and has 0\n               standard deviation, resulting in a divide by 0 error. `NA` will be returned.\n\n\nThere were issues with some computations   A: x1\n\n\nThere were issues with some computations   A: x10\n\n\n\n\ntune::collect_metrics(fit_rs_null)\n\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    933.    10    76.7 Preprocessor1_Model1\n2 rsq     standard    NaN      0    NA   Preprocessor1_Model1\n\n\nRMSE = 933, SE = 76.7\n\nResults\nThe original RMSE value for the univariate model was 703, compared to the new value of 691. Using the cross-validation method to evaluate this model resulted in a better estimated fit. The standard error is 67.5, which is relatively large. This indicates that the RMSE varies considerably across folds, possibly suggesting an unstable model or high data variability.\nThe original RMSE value for the full model was 627, compared to the new value of 646. Using the cross-validation method to evaluate this model resulted in a weaker estimated fit. The standard error is 64.8, which is relatively large. This indicates that the RMSE varies considerably across folds, possibly suggesting an unstable model or high data variability.\nThe RMSE values for the null model are similar.\n\n\n\nChanging the seed\n\n# setup\n\n# fit model with resampling\nset.seed(333)\n\n# define linear model specification\nmodel_spec &lt;- parsnip::linear_reg() %&gt;% \n  parsnip::set_engine(\"lm\") %&gt;% \n  parsnip::set_mode(\"regression\")\n\n# define null model specification\nnull_spec &lt;- parsnip::null_model() %&gt;%\n  parsnip::set_engine(\"parsnip\") %&gt;%\n  parsnip::set_mode(\"regression\")\n\n# create folds\nfolds &lt;- rsample::vfold_cv(train_data, v = 10)\n\n\n# linear model to Y using dose\nfit_wf1 &lt;- workflows::workflow() %&gt;%\n  workflows::add_model(model_spec) %&gt;%\n  workflows::add_formula(Y ~ dose)\n\nfit_rs1 &lt;- fit_wf1 %&gt;%\n  tune::fit_resamples(folds)\n\ntune::collect_metrics(fit_rs1)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   706.       10 48.1    Preprocessor1_Model1\n2 rsq     standard     0.484    10  0.0660 Preprocessor1_Model1\n\n\nRMSE = 706, SE = 48.1; R-squared = 0.484\n\n# linear model to Y using all predictors\nfit_wf2 &lt;- workflows::workflow() %&gt;%\n  workflows::add_model(model_spec) %&gt;%\n  workflows::add_formula(Y ~ dose + age + sex + wt + ht)\n\nfit_rs2 &lt;- fit_wf2 %&gt;%\n  tune::fit_resamples(folds)\n\ntune::collect_metrics(fit_rs2)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   645.       10 52.7    Preprocessor1_Model1\n2 rsq     standard     0.566    10  0.0619 Preprocessor1_Model1\n\n\nRMSE = 645, SE = 52.7; R-squared = 0.566, SE = 0.0619\n\n# null model\nfit_wf_null &lt;- workflows::workflow() %&gt;%\n  workflows::add_model(null_spec) %&gt;%\n  workflows::add_formula(Y ~ .)\n\nfit_rs_null &lt;- fit_wf_null %&gt;%\n  tune::fit_resamples(folds)\n\n→ A | warning: A correlation computation is required, but `estimate` is constant and has 0\n               standard deviation, resulting in a divide by 0 error. `NA` will be returned.\n\n\nThere were issues with some computations   A: x1\n\n\nThere were issues with some computations   A: x10\n\n\n\n\ntune::collect_metrics(fit_rs_null)\n\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    936.    10    69.1 Preprocessor1_Model1\n2 rsq     standard    NaN      0    NA   Preprocessor1_Model1\n\n\nRMSE = 936, SE = 69.1\n\nResults\nChanging the seed results in different RMSE and SE values. For the univariate model, the new RMSE = 706, SE = 48.1; compared to the previous RMSE = 691, SE = 67.5. Note that if we had originally used this seed, we would have concluded that using cross-validation increases the RMSE for this model. For the full model, the new RMSe = 645, SE = 52.7; compared to the previous RMSE = 646, SE = 64.8. For the null model, the new RMSE = 936, SE = 69.1; compared to the previous RMSE = 933, SE = 76.7.\n\n#Part 2 ##This section added by Shaun van den Hurk"
  },
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Placeholder file for the future Tidy Tuesday exercise."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(here) #to set paths\n\nhere() starts at E:/Shaun Documents/Work/Work/UGA/PhD/MADA/murphyjohn-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at E:/Shaun Documents/Work/Work/UGA/PhD/MADA/murphyjohn-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  factor                   2     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts            \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2      \n2 legume                0             1 FALSE          3 chi: 5, len: 2, pea: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n3 vo2_max               0             1  32.2 10.7  10  29  35  37   48 ▂▂▃▇▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\nPart 2 contributions:\nCreate a boxplot with favorite legumes as a function of height.\n\np5&lt;- mydata %&gt;% ggplot(aes(x=legume, y =Height)) + geom_boxplot() \nplot(p5)\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"Favorite-legume-height-stratified.png\")\nggsave(filename = figure_file, plot=p5)\n\nSaving 7 x 5 in image\n\n\nCreate a scatter plot with weight as a function of VO2 Max.\n\np6&lt;- mydata %&gt;% ggplot(aes(x=Weight, y =vo2_max)) + geom_point() \nplot(p6)\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"Weight-VO2-Max-stratified.png\")\nggsave(filename = figure_file, plot=p6)\n\nSaving 7 x 5 in image\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "presentation-exercise/data/readme.html",
    "href": "presentation-exercise/data/readme.html",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "This data package contains the data that powers the chart “Food: greenhouse gas emissions across the supply chain” on the Our World in Data website.\n\n\nThe high level structure of the CSV file is that each row is an observation for an entity (usually a country or region) and a timepoint (usually a year).\nThe first two columns in the CSV file are “Entity” and “Code”. “Entity” is the name of the entity (e.g. “United States”). “Code” is the OWID internal entity code that we use if the entity is a country or region. For normal countries, this is the same as the iso alpha-3 code of the entity (e.g. “USA”) - for non-standard countries like historical countries these are custom codes.\nThe third column is either “Year” or “Day”. If the data is annual, this is “Year” and contains only the year as an integer. If the column is “Day”, the column contains a date string in the form “YYYY-MM-DD”.\nThe remaining columns are the data columns, each of which is a time series. If the CSV data is downloaded using the “full data” option, then each column corresponds to one time series below. If the CSV data is downloaded using the “only selected data visible in the chart” option then the data columns are transformed depending on the chart type and thus the association with the time series might not be as straightforward.\n\n\n\nThe .metadata.json file contains metadata about the data package. The “charts” key contains information to recreate the chart, like the title, subtitle etc.. The “columns” key contains information about each of the columns in the csv, like the unit, timespan covered, citation for the data etc..\n\n\n\nOur World in Data is almost never the original producer of the data - almost all of the data we use has been compiled by others. If you want to re-use data, it is your responsibility to ensure that you adhere to the sources’ license and to credit them correctly. Please note that a single time series may have more than one source - e.g. when we stich together data from different time periods by different producers or when we calculate per capita metrics using population data from a second source.\n\n\nAll data and visualizations on Our World in Data rely on data sourced from one or several original data providers. Preparing this original data involves several processing steps. Depending on the data, this can include standardizing country names and world region definitions, converting units, calculating derived indicators such as per capita measures, as well as adding or adapting metadata such as the name or the description given to an indicator. Read about our data pipeline\n\n\n\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Land use change” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Farm” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Animal feed” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Processing” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Transport” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Retail” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Packaging” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Losses” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#csv-structure",
    "href": "presentation-exercise/data/readme.html#csv-structure",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "The high level structure of the CSV file is that each row is an observation for an entity (usually a country or region) and a timepoint (usually a year).\nThe first two columns in the CSV file are “Entity” and “Code”. “Entity” is the name of the entity (e.g. “United States”). “Code” is the OWID internal entity code that we use if the entity is a country or region. For normal countries, this is the same as the iso alpha-3 code of the entity (e.g. “USA”) - for non-standard countries like historical countries these are custom codes.\nThe third column is either “Year” or “Day”. If the data is annual, this is “Year” and contains only the year as an integer. If the column is “Day”, the column contains a date string in the form “YYYY-MM-DD”.\nThe remaining columns are the data columns, each of which is a time series. If the CSV data is downloaded using the “full data” option, then each column corresponds to one time series below. If the CSV data is downloaded using the “only selected data visible in the chart” option then the data columns are transformed depending on the chart type and thus the association with the time series might not be as straightforward."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#metadata.json-structure",
    "href": "presentation-exercise/data/readme.html#metadata.json-structure",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "The .metadata.json file contains metadata about the data package. The “charts” key contains information to recreate the chart, like the title, subtitle etc.. The “columns” key contains information about each of the columns in the csv, like the unit, timespan covered, citation for the data etc.."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#about-the-data",
    "href": "presentation-exercise/data/readme.html#about-the-data",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "Our World in Data is almost never the original producer of the data - almost all of the data we use has been compiled by others. If you want to re-use data, it is your responsibility to ensure that you adhere to the sources’ license and to credit them correctly. Please note that a single time series may have more than one source - e.g. when we stich together data from different time periods by different producers or when we calculate per capita metrics using population data from a second source.\n\n\nAll data and visualizations on Our World in Data rely on data sourced from one or several original data providers. Preparing this original data involves several processing steps. Depending on the data, this can include standardizing country names and world region definitions, converting units, calculating derived indicators such as per capita measures, as well as adding or adapting metadata such as the name or the description given to an indicator. Read about our data pipeline"
  },
  {
    "objectID": "presentation-exercise/data/readme.html#land-use-change",
    "href": "presentation-exercise/data/readme.html#land-use-change",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Land use change” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#farm",
    "href": "presentation-exercise/data/readme.html#farm",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Farm” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#animal-feed",
    "href": "presentation-exercise/data/readme.html#animal-feed",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Animal feed” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#processing",
    "href": "presentation-exercise/data/readme.html#processing",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Processing” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#transport",
    "href": "presentation-exercise/data/readme.html#transport",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Transport” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#retail",
    "href": "presentation-exercise/data/readme.html#retail",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Retail” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#packaging",
    "href": "presentation-exercise/data/readme.html#packaging",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Packaging” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#losses",
    "href": "presentation-exercise/data/readme.html#losses",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Losses” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "fitting-exercise/readme.html",
    "href": "fitting-exercise/readme.html",
    "title": "Introduction",
    "section": "",
    "text": "This folder contains a simple model fitting exercise.\n\n\ndata contains the raw data file\ncode contains all code run for this analysis"
  },
  {
    "objectID": "fitting-exercise/readme.html#description-of-contents",
    "href": "fitting-exercise/readme.html#description-of-contents",
    "title": "Introduction",
    "section": "",
    "text": "data contains the raw data file\ncode contains all code run for this analysis"
  },
  {
    "objectID": "fitting-exercise/code/readme.html",
    "href": "fitting-exercise/code/readme.html",
    "title": "Code",
    "section": "",
    "text": "Code\nfitting-exercise.qmd contains all processing, eda, and analysis code"
  },
  {
    "objectID": "fitting-exercise/data/readme.html",
    "href": "fitting-exercise/data/readme.html",
    "title": "Data",
    "section": "",
    "text": "Data\nMavoglurant_A2121_nmpk.csv contains the raw data. Data are processing in fitting-exercise.qmd. Final variables included in the cleaned data include: * id: a uniqie patient identifier * dose: dose of drug recived by patient * age: age of patient * sex: sex of patient. levels include “1” and “2”. additional information not available. * race: race of patient. levels include “1”, “2”, “7”, and “99”. additional information not available. * wt: likely weight of patient but unverified. additional information of measurement not available. * ht: likely height of patient but unverified. additional information of measurement not available."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to my website and portfolio!",
    "section": "",
    "text": "Hello!\nThis is my website and portfolio, created for Modern Applied Data Analysis (MADA) course at the University of Georgia.\nCheers🥳\n-Murphy"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "I will be reproducing a visualization and table from data which can be found here. The full article by Hannah Ritchie is in the Our World in Data journal. The data was free for download along with an image of the graph, which I’ve pasted below."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#ais-attempt",
    "href": "presentation-exercise/presentation-exercise.html#ais-attempt",
    "title": "Presentation Exercise",
    "section": "AI’s Attempt",
    "text": "AI’s Attempt\nPer the instructions, I asked ChatGPT to write me code that will reproduce the figure. I uploaded the above png and wrote “I have the data in this graph. Write R code to recreate it”. I received the following output.\n\nlibrary(ggplot2)\n\n# Data\nfood_items &lt;- c(\"Beef (beef herd)\", \"Dark Chocolate\", \"Lamb & Mutton\", \"Beef (dairy herd)\", \"Coffee\", \n                \"Shrimps (farmed)\", \"Cheese\", \"Fish (farmed)\", \"Pig Meat\", \"Poultry Meat\", \"Palm Oil\", \n                \"Olive Oil\", \"Eggs\", \"Rice\", \"Sunflower Oil\", \"Tofu\", \"Milk\", \"Tomatoes\", \"Peas\", \"Bananas\")\n\ntotal_emissions &lt;- c(99, 47, 40, 33, 29, 27, 24, 14, 12, 9.9, 7.3, 5.7, 4.7, 4.5, 3.6, 3.2, 3.2, 2.1, 0.98, 0.89)\n\ncategories &lt;- c(\"Land use change\", \"Farm\", \"Animal feed\", \"Processing\", \"Transport\", \"Retail\", \"Packaging\", \"Losses\")\n\n# Example breakdown of emissions (these values should be adjusted based on actual data)\nland_use &lt;- c(60, 20, 25, 15, 10, 12, 8, 5, 6, 4, 3, 2, 1, 1, 1, 1, 1, 0.5, 0.3, 0.2)\nfarm &lt;- c(20, 10, 8, 10, 12, 8, 6, 4, 3, 2.5, 2, 1.5, 1.2, 1, 0.8, 0.6, 0.5, 0.4, 0.3, 0.2)\nanimal_feed &lt;- c(10, 5, 4, 5, 3, 2, 2, 1, 2, 1.5, 1, 0.8, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02)\nprocessing &lt;- c(3, 5, 2, 1.5, 2, 2, 1.5, 1.2, 0.8, 0.6, 0.5, 0.4, 0.3, 0.2, 0.2, 0.15, 0.12, 0.1, 0.08, 0.05)\ntransport &lt;- c(2, 5, 1, 0.8, 1, 1.5, 1, 0.9, 0.7, 0.6, 0.4, 0.3, 0.25, 0.2, 0.18, 0.15, 0.1, 0.08, 0.05, 0.03)\nretail &lt;- c(2, 1, 0.5, 0.4, 0.3, 0.2, 0.2, 0.1, 0.1, 0.08, 0.05, 0.04, 0.03, 0.02, 0.015, 0.01, 0.008, 0.006, 0.004, 0.002)\npackaging &lt;- c(1, 0.8, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.08, 0.05, 0.04, 0.03, 0.02, 0.015, 0.01, 0.008, 0.006, 0.004, 0.002)\nlosses &lt;- c(1, 0.5, 0.3, 0.2, 0.2, 0.15, 0.1, 0.08, 0.06, 0.05, 0.03, 0.025, 0.02, 0.015, 0.012, 0.01, 0.008, 0.006, 0.004, 0.002)\n\n# Create a data frame\ndf &lt;- data.frame(Food = rep(food_items, each = 8), \n                 Category = rep(categories, times = length(food_items)), \n                 Emissions = c(land_use, farm, animal_feed, processing, transport, retail, packaging, losses))\n\n# Plot the data\nggplot(df, aes(x = Emissions, y = reorder(Food, -Emissions), fill = Category)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Food: Greenhouse Gas Emissions Across the Supply Chain\",\n       x = \"Emissions (kg CO₂eq per kg of food)\",\n       y = \"Food Item\") +\n  scale_fill_manual(values = c(\"#8DA0CB\", \"#E78AC3\", \"#A6D854\", \"#FFD92F\", \"#E5C494\", \"#B3B3B3\", \"#66C2A5\", \"#FC8D62\")) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThat’s pretty solid if you ask me. The figure could use some cleaning up on the labels, text, and colors. It also of course needs to consider the real data. I don’t foresee ChatGPT improving the figure much more without some user-machine wrangling so I’m going to take over from here. Anything AI can do, I can (theoretically) do😊."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#mjs-attempt",
    "href": "presentation-exercise/presentation-exercise.html#mjs-attempt",
    "title": "Presentation Exercise",
    "section": "MJ’s Attempt",
    "text": "MJ’s Attempt\n\nSetup\n\n# load packages\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\n\n# load data\ndat &lt;- read.csv(\n  here::here(\"presentation-exercise/data/food-emissions-supply-chain.csv\")\n  )\n\n\n\nData processing\n\ndat1 &lt;- dat %&gt;%\n  rename(\n    food_items = Entity,\n    land_use = food_emissions_land_use,\n    farm = food_emissions_farm,\n    animal_feed = food_emissions_animal_feed,\n    processing = food_emissions_processing,\n    transport = food_emissions_transport,\n    retail = food_emissions_retail,\n    packaging = food_emissions_packaging,\n    losses = food_emissions_losses\n  ) %&gt;%\n  select(-Code, -Year) %&gt;% # remove unused columns\n  mutate(\n    total_emissions = rowSums(select(\n      ., land_use, farm, animal_feed, processing, \n      transport, retail, packaging, losses))\n  )\n\n# pivot longer for plotting bars\ndat2 &lt;- dat1 %&gt;%\n  # data includes more items then shown on graph\n  filter(\n    food_items %in% c(\n      \"Beef (beef herd)\", \"Dark Chocolate\", \"Lamb & Mutton\", \n      \"Beef (dairy herd)\", \"Coffee\", \"Shrimps (farmed)\", \"Cheese\", \n      \"Fish (farmed)\", \"Pig Meat\", \"Poultry Meat\", \"Palm Oil\", \n      \"Olive Oil\", \"Eggs\", \"Rice\", \"Sunflower Oil\", \"Tofu\", \"Milk\", \n      \"Tomatoes\", \"Peas\", \"Bananas\"\n    )\n    ) %&gt;%\n  tidyr::pivot_longer(\n    cols = -food_items,\n    names_to = \"category\",\n    values_to = \"emissions\"\n  ) \n\n# remove \"total\" row, clean up labels\ndat3 &lt;- dat2 %&gt;%\n  filter(\n    category != \"total_emissions\"\n  ) %&gt;%\n  # clean category labels\n  mutate(\n    category = case_when(\n      category == \"land_use\" ~ \"Land use change\",\n      category == \"farm\" ~ \"Farm\",\n      category == \"animal_feed\" ~ \"Animal feed\",\n      category == \"processing\" ~ \"Processing\",\n      category == \"transport\" ~ \"Transport\",\n      category == \"retail\" ~ \"Retail\", \n      category == \"packaging\" ~ \"Packaging\",\n      category == \"losses\" ~ \"Losses\", \n      TRUE ~ category\n    ), \n    # for ordering on plot\n    category = factor(category, levels = c(\n      \"Losses\", \"Packaging\", \"Retail\", \"Transport\", \"Processing\", \n      \"Animal feed\", \"Farm\", \"Land use change\"\n    ))\n  )\n\n# reserve a separate dataset with total emissions\ndat4 &lt;- dat2 %&gt;%\n  filter(\n    category == \"total_emissions\"\n  )\n\n\n\nPlot the data\n\nggplot(dat3, aes(x = emissions, y = reorder(food_items, emissions), fill = category)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Food: greenhouse gas emissions across the supply chain\",\n       subtitle = \"Greenhouse gas emissions are measured in kilograms of carbon dioxide-equivalents (CO2eq) per kilogram of food.\",\n       x = NULL,\n       y = NULL,\n       fill = NULL\n       )+\n  scale_fill_manual(values = c(\"darkseagreen\", \"burlywood\", \"orange\", \"cornflowerblue\", \"indianred\", \"yellow\", \"lightslategray\", \"lavender\"),\n                    limits = rev(levels(dat3$category))) +\n  theme_minimal() +\n  theme(legend.position = \"top\",\n        plot.title = element_text(size = 20),\n        legend.text = element_text(size = 11),\n        axis.text.y = element_text(size = 12),\n        panel.grid = element_blank()) +\n  guides(fill = guide_legend(nrow = 1, byrow = TRUE))+\n  geom_text(data = dat4, \n            aes(x = emissions, y = food_items, \n                label = paste(round(emissions, 1), \"kg\")), \n            hjust = -0.05,\n            size = 3)"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#setup-1",
    "href": "presentation-exercise/presentation-exercise.html#setup-1",
    "title": "Presentation Exercise",
    "section": "Setup",
    "text": "Setup\n\n# load packages\nlibrary(gt)\n\nWarning: package 'gt' was built under R version 4.4.3\n\nlibrary(gtsummary)\n\nWarning: package 'gtsummary' was built under R version 4.4.3"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#data-processing-1",
    "href": "presentation-exercise/presentation-exercise.html#data-processing-1",
    "title": "Presentation Exercise",
    "section": "Data processing",
    "text": "Data processing\n\n# put food items into categories\ndat5 &lt;- dat1 %&gt;%\n  mutate(\n    food_group = case_when(\n      food_items %in% c(\"Beef (beef herd)\", \"Beef (dairy herd)\",\"Lamb & Mutton\",\n                        \"Pig Meat\", \"Poultry Meat\") ~ \"Land Animals\",\n      food_items %in% c(\"Fish (farmed)\", \"Shrimps (farmed)\") ~ \"Water Animals\",\n      food_items %in% c(\"Cheese\", \"Eggs\", \"Milk\") ~ \"Animal By-products\",\n      food_items %in% c(\"Apples\", \"Bananas\", \"Berries & Grapes\", \"Citrus Fruit\",\n                        \"Other Fruit\", \"Tomatoes\") ~ \"Fruits\",\n      food_items %in% c(\"Root Vegetables\", \"Onions & Leeks\", \"Brassicas\",\n                        \"Other Vegetables\", \"Potatoes\", \n                        \"Cassava\") ~ \"Vegetables\",\n      food_items %in% c(\"Maize\", \"Barley\", \"Rice\", \"Wheat & Rye\", \"Oatmeal\",\n                        \"Other Pulses\", \"Peas\") ~ \"Legumes & Grains\",\n      food_items %in% c(\"Beet Sugar\", \"Cane Sugar\") ~ \"Sugars\",\n      food_items %in% c(\"Groundnuts\", \"Nuts\") ~ \"Nuts & Seeds\",\n      food_items %in% c(\"Olive Oil\", \"Rapeseed Oil\", \"Soybean Oil\", \n                        \"Sunflower Oil\", \"Palm Oil\") ~ \"Oils\",\n      food_items %in% c(\"Soy milk\", \"Tofu\") ~ \"Plant-based Alternatives\",\n      food_items %in% c(\"Coffee\", \"Wine\", \"Dark Chocolate\") ~ \"Misc\",\n      TRUE ~ \"Other\"\n    )\n  )\n\n\n# summary stats\nformat_ci &lt;- function(df, d = 1) {\n    fmt_str &lt;- paste0(\"%.\", d, \"f\")\n    out &lt;- paste0(\n        sprintf(fmt_str, df$y), \" (\",\n        sprintf(fmt_str, df$ymin), \", \",\n        sprintf(fmt_str, df$ymax), \")\"\n    )\n    \n    return(out)\n}\n\n# dataframe including summary statistics for table\ndat6 &lt;- dat5 %&gt;%\n  group_by(food_group) %&gt;%\n  summarise(\n    n = n(),\n    land = ggplot2::mean_cl_boot(land_use, B=1000) %&gt;% format_ci(),\n    farm = ggplot2::mean_cl_boot(farm, B=1000) %&gt;% format_ci(),\n    animal = ggplot2::mean_cl_boot(animal_feed, B=1000) %&gt;% format_ci(),\n    processing = ggplot2::mean_cl_boot(processing, B=1000) %&gt;% format_ci(),\n    transport = ggplot2::mean_cl_boot(transport, B=1000) %&gt;% format_ci(),\n    retail = ggplot2::mean_cl_boot(retail, B=1000) %&gt;% format_ci(),\n    pack = ggplot2::mean_cl_boot(packaging, B=1000) |&gt; format_ci(),\n    losses = ggplot2::mean_cl_boot(losses, B=1000) |&gt; format_ci(),\n  ) %&gt;%\n  mutate(\n    symbol = c(\n      \"cheese\", \"apple-whole\", \"burger\", \"wheat-awn\", \"wine-glass\", \"seedling\",\n      \"bottle-droplet\", \"leaf\", \"cubes-stacked\", \"carrot\", \"fish\"\n    )) %&gt;%\n  select(\n    food_group, symbol, n, land, farm, animal, processing, \n    transport, retail, pack, losses\n  )"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#create-table",
    "href": "presentation-exercise/presentation-exercise.html#create-table",
    "title": "Presentation Exercise",
    "section": "Create table",
    "text": "Create table\n\ntab &lt;- dat6 %&gt;%\n  gt(rowname_col = \"food_group\") %&gt;%\n  # label columns\n  cols_label(\n    symbol = \"\",\n    land = \"Land use change\",\n        farm = \"Farm\",\n        animal = \"Animal feed\",\n        processing = \"Processing\",\n        transport = \"Transport\",\n        retail = \"Retail\",\n        pack = \"Packaging\",\n        losses = \"Losses\"\n  ) %&gt;%\n  # center cell contents\n  cols_align(align = \"center\", columns = -food_group) %&gt;%\n  \n  # aesthetic specifics ========================================================\n  \n  tab_header(\n    title = md(paste(\"Average Emissions\", \n                     fontawesome::fa(\"fire\"), \"by Food Group\"))\n    )%&gt;%\n  \n  tab_footnote(\n    footnote = \"Mean (95% bootstrap CI; 1000 resamples)\",\n    locations = cells_column_labels(columns = c(land, farm, animal, processing,\n                                                transport, retail, pack, losses))\n  ) %&gt;%\n  \n  # stub and label text\n   tab_style(\n    style = cell_text(\n      size = \"smaller\",\n      weight = \"bold\",\n      transform = \"uppercase\"\n    ),\n    locations = list(cells_column_labels(), cells_stub())\n  ) %&gt;%\n  \n  # cell text\n  tab_style(\n    style = cell_text(\n      size = \"smaller\"),\n    locations = cells_body()\n   ) %&gt;%\n  \n  # title and cell fill\n   tab_style(\n    style = cell_fill(color = \"gray98\"),\n    locations = list(cells_title(), cells_body(columns = -symbol))\n  ) %&gt;%\n  \n  # symbol specific fill\n  tab_style(\n    style = cell_fill(color = \"darksalmon\" %&gt;% adjust_luminance(steps = 1)),\n    locations = cells_body(columns = symbol)\n  ) %&gt;%\n  \n  # insert symbols\n   fmt_icon(columns = symbol) %&gt;%\n  \n  # caption\n   tab_caption(caption = md(\"Average greenhouse gas emissions (CO2kg) per kilogram of food product, categorized by food group. Mean emission values are included, along with the corresponding 95% bootstrap confidence intervals, for each of the key stages in the food production and supply chain: land use change, farming, animal feed, processing, transport, retail, packaging, and losses.\")) %&gt;%\n  \n  # size adjustments\n   cols_width(\n     symbol ~ px(25),\n     n ~ px(25)\n  ) %&gt;%\n  tab_options(table.font.size = 14)\n\n# print table\ntab\n\n\n\n\n\nAverage greenhouse gas emissions (CO2kg) per kilogram of food product, categorized by food group. Mean emission values are included, along with the corresponding 95% bootstrap confidence intervals, for each of the key stages in the food production and supply chain: land use change, farming, animal feed, processing, transport, retail, packaging, and losses.\n\n\n\n\nAverage Emissions\n\n\n\nby Food Group\n\n\n\n\nn\nLand use change1\nFarm1\nAnimal feed1\nProcessing1\nTransport1\nRetail1\nPackaging1\nLosses1\n\n\n\n\nAnimal By-products\n\n\n\nCheese\n\n\n\n\n3\n1.9 (0.5, 4.5)\n5.3 (1.3, 13.1)\n1.6 (0.2, 2.4)\n0.3 (0.0, 0.7)\n0.1 (0.1, 0.1)\n0.2 (0.0, 0.3)\n0.1 (0.1, 0.2)\n1.0 (0.2, 2.6)\n\n\nFruits\n\n\n\nApple Whole\n\n\n\n\n6\n0.1 (-0.1, 0.2)\n0.4 (0.3, 0.6)\n0.0 (0.0, 0.0)\n0.0 (0.0, 0.0)\n0.2 (0.1, 0.2)\n0.0 (0.0, 0.0)\n0.1 (0.0, 0.2)\n0.3 (0.1, 0.4)\n\n\nLand Animals\n\n\n\nBurger\n\n\n\n\n5\n6.2 (1.1, 14.8)\n21.7 (6.1, 39.3)\n3.2 (2.8, 3.8)\n1.2 (0.7, 1.7)\n0.5 (0.4, 0.6)\n0.3 (0.2, 0.3)\n0.4 (0.3, 0.4)\n5.5 (2.1, 10.6)\n\n\nLegumes & Grains\n\n\n\nWheat Awn\n\n\n\n\n7\n0.1 (0.0, 0.2)\n1.3 (0.6, 2.1)\n0.0 (0.0, 0.0)\n0.1 (0.0, 0.1)\n0.1 (0.1, 0.1)\n0.1 (0.0, 0.1)\n0.2 (0.1, 0.3)\n0.2 (0.1, 0.4)\n\n\nMisc\n\n\n\nWine Glass\n\n\n\n\n3\n9.9 (-0.1, 25.8)\n6.0 (0.6, 10.8)\n0.0 (0.0, 0.0)\n0.4 (0.1, 0.6)\n0.1 (0.1, 0.1)\n0.0 (0.0, 0.1)\n1.1 (0.7, 1.7)\n8.2 (0.2, 12.9)\n\n\nNuts & Seeds\n\n\n\nSeedling\n\n\n\n\n2\n-1.4 (-3.3, 0.5)\n2.5 (1.6, 3.4)\n0.0 (0.0, 0.0)\n0.2 (0.1, 0.4)\n0.1 (0.1, 0.1)\n0.0 (0.0, 0.0)\n0.1 (0.1, 0.1)\n0.2 (-0.0, 0.5)\n\n\nOils\n\n\n\nBottle Droplet\n\n\n\n\n5\n1.1 (-0.0, 2.3)\n2.2 (1.7, 3.0)\n0.0 (0.0, 0.0)\n0.5 (0.2, 0.8)\n0.2 (0.2, 0.3)\n0.0 (0.0, 0.0)\n0.8 (0.8, 0.8)\n0.4 (0.3, 0.6)\n\n\nPlant-based Alternatives\n\n\n\nLeaf\n\n\n\n\n2\n0.6 (0.2, 1.0)\n0.3 (0.1, 0.5)\n0.0 (0.0, 0.0)\n0.5 (0.2, 0.8)\n0.1 (0.1, 0.2)\n0.3 (0.3, 0.3)\n0.1 (0.1, 0.2)\n0.2 (0.1, 0.3)\n\n\nSugars\n\n\n\nCubes Stacked\n\n\n\n\n2\n0.6 (0.0, 1.3)\n0.5 (0.5, 0.5)\n0.0 (0.0, 0.0)\n0.1 (0.0, 0.2)\n0.7 (0.6, 0.8)\n0.0 (0.0, 0.0)\n0.1 (0.1, 0.1)\n0.4 (0.3, 0.5)\n\n\nVegetables\n\n\n\nCarrot\n\n\n\n\n6\n0.1 (0.0, 0.3)\n0.2 (0.2, 0.2)\n0.0 (0.0, 0.0)\n0.0 (0.0, 0.0)\n0.1 (0.1, 0.1)\n0.0 (0.0, 0.0)\n0.0 (0.0, 0.0)\n0.1 (0.1, 0.2)\n\n\nWater Animals\n\n\n\nFish\n\n\n\n\n2\n0.8 (0.3, 1.2)\n10.8 (8.1, 13.5)\n2.9 (1.8, 4.0)\n0.0 (0.0, 0.0)\n0.3 (0.2, 0.3)\n0.2 (0.1, 0.4)\n0.3 (0.1, 0.5)\n4.9 (2.0, 7.8)\n\n\n\n1 Mean (95% bootstrap CI; 1000 resamples)"
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at E:/Shaun Documents/Work/Work/UGA/PhD/MADA/murphyjohn-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(here) #to set paths\n\nhere() starts at E:/Shaun Documents/Work/Work/UGA/PhD/MADA/murphyjohn-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                         `Allowed Values`\n  &lt;chr&gt;           &lt;chr&gt;                                         &lt;chr&gt;           \n1 Height          \"height in centimeters\"                       numeric value &gt;…\n2 Weight          \"weight in kilograms\"                         numeric value &gt;…\n3 Gender          \"identified gender (male/female/other)\"       M/F/O/NA        \n4 VO2 Max         \"maximal oxygen consumption\"                  numeric value &gt;…\n5 Favorite legume \"patient-reported response to the question \\… lentils/chickpe…\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height            &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"16…\n$ Weight            &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 5…\n$ Gender            &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"…\n$ `VO2 Max`         &lt;dbl&gt; 35, 40, 39, 48, 99, 10, 37, 25, 50, 44, 32, 36, 29, …\n$ `Favorite Legume` &lt;chr&gt; \"lentils\", \"chickpeas\", \"lentils\", \"peas\", \"runner b…\n\nsummary(rawdata)\n\n    Height              Weight          Gender             VO2 Max     \n Length:14          Min.   :  45.0   Length:14          Min.   :10.00  \n Class :character   1st Qu.:  55.0   Class :character   1st Qu.:30.50  \n Mode  :character   Median :  70.0   Mode  :character   Median :36.50  \n                    Mean   : 602.7                      Mean   :39.57  \n                    3rd Qu.:  90.0                      3rd Qu.:43.00  \n                    Max.   :7000.0                      Max.   :99.00  \n                    NA's   :1                                          \n Favorite Legume   \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender `VO2 Max` `Favorite Legume`\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;            \n1 180        80 M             35 lentils          \n2 175        70 O             40 chickpeas        \n3 sixty      60 F             39 lentils          \n4 178        76 F             48 peas             \n5 192        90 NA            99 runner beans     \n6 6          55 F             10 chickpeas        \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFavorite Legume\n0\n1\n4\n12\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55.0\n70.0\n90\n7000\n▇▁▁▁▁\n\n\nVO2 Max\n0\n1.00\n39.57\n19.84\n10\n30.5\n36.5\n43\n99\n▂▇▂▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFavorite Legume\n0\n1\n4\n12\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nVO2 Max\n0\n1.00\n39.62\n20.65\n10\n30.00\n36\n44\n99\n▂▇▂▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFavorite Legume\n0\n1\n4\n12\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nVO2 Max\n0\n1.00\n39.62\n20.65\n10\n30.00\n36\n44\n99\n▂▇▂▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFavorite Legume\n0\n1\n4\n12\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nVO2 Max\n0\n1\n39.91\n22.45\n10\n29.5\n36\n44\n99\n▂▇▂▁▁\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nFavorite Legume\n0\n1\n4\n12\n0\n4\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nVO2 Max\n0\n1\n39.91\n22.45\n10\n29.5\n36\n44\n99\n▂▇▂▁▁\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nFavorite Legume\n0\n1\n4\n9\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nVO2 Max\n0\n1\n32.22\n10.70\n10\n29\n35\n37\n48\n▂▂▃▇▂\n\n\n\n\n\n\n# Rename variables \nd5 &lt;- d4 %&gt;% dplyr::rename(legume = `Favorite Legume`,\n                           vo2_max = `VO2 Max`)\n\n#change Favorite Legume column to a factor\nd5$legume &lt;- as.factor(d5$legume)  \nskimr::skim(d5)\n\n\nData summary\n\n\nName\nd5\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\nlegume\n0\n1\nFALSE\n3\nchi: 5, len: 2, pea: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nvo2_max\n0\n1\n32.22\n10.70\n10\n29\n35\n37\n48\n▂▂▃▇▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d5\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "Shaun van den Hurk contributed to this exercise.\nThe structure below is one possible setup for a data analysis project (including the course project). For a manuscript, adjust as needed. You don’t need to have exactly these sections, but the content covering those sections should be addressed.\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nThe data contains measured height, weight, and VO2 Max values along with self-reported gender and favorite legume."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nfactor\nlegume\n0\n1\nFALSE\n3\nchi: 5, len: 2, pea: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nnumeric\nvo2_max\n0\n1\nNA\nNA\nNA\n32.22222\n10.69787\n10\n29\n35\n37\n48\n▂▂▃▇▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "synthetic-data-exercise/synthetic-data-exercise.html",
    "href": "synthetic-data-exercise/synthetic-data-exercise.html",
    "title": "Synthetic Data Generation and Exploration",
    "section": "",
    "text": "For this exercise, I am going to simulate simple data from a (hypothetical) vaccine cohort of individuals who received various doses of a vaccine. Samples were collected and a specific antibody was measured on days 0, 3, 5, 7, 14, 21, 28, and 35. The following variables are to be included: id, age, dose, days, titer. Brief descriptions of the variables are as follows:\n\nid is an identifier for each participant\nage is the participant’s age at day 0\ndose is the numerical dose of vaccine for which the individual received in micrograms (mcg) (10, 100, 1000)\ndays represents the number of days since vaccination on which the sample was collected\ntiter is the measured amount of antibody in the sample\n\nThe simulation assumes the following:\n\nThe immune response follows a logistic growth function up to a peak, followed by an exponential decay.\nOlder individuals have a weaker boost in response to vaccination.\nBaseline titers (day 0) are independent of dose and vary between individuals.\nIndividual variation is present in peak titer, growth rate, decay rate, and peak timing.\nTiters are strictly positive."
  },
  {
    "objectID": "synthetic-data-exercise/synthetic-data-exercise.html#general",
    "href": "synthetic-data-exercise/synthetic-data-exercise.html#general",
    "title": "Synthetic Data Generation and Exploration",
    "section": "General",
    "text": "General\n\n# load packages\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)"
  },
  {
    "objectID": "synthetic-data-exercise/synthetic-data-exercise.html#assign-parameters",
    "href": "synthetic-data-exercise/synthetic-data-exercise.html#assign-parameters",
    "title": "Synthetic Data Generation and Exploration",
    "section": "Assign parameters",
    "text": "Assign parameters\n\n# Set seed for reproducibility\nset.seed(123)\n\n# number of individuals\nN &lt;- 100\n\n# assign random ages\nages &lt;- sample(18:80, N, replace = TRUE)\n\n# vaccine doses\ndose &lt;- c(10, 100, 1000)\n\n# measurement times\ndays &lt;- c(0, 3, 5, 7, 14, 21, 28, 35) \n\n# assign doses\ndoses &lt;- rep(dose, length.out = N)\n\n# categorical dose variable\ndose_cat &lt;- if_else(\n  doses == 10, \"low\", \n  if_else(\n    doses == 100, \"medium\", \"high\"\n  )\n)"
  }
]