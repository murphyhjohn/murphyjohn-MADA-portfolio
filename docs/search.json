[
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Placeholder file for the future Tidy Tuesday exercise."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(here) #to set paths\n\nhere() starts at C:/Users/murph/Documents/Github/murphyjohn-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at C:/Users/murph/Documents/Github/murphyjohn-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  factor                   2     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts            \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2      \n2 legume                0             1 FALSE          3 chi: 5, len: 2, pea: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n3 vo2_max               0             1  32.2 10.7  10  29  35  37   48 ▂▂▃▇▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\nPart 2 contributions:\nCreate a boxplot with favorite legumes as a function of height.\n\np5&lt;- mydata %&gt;% ggplot(aes(x=legume, y =Height)) + geom_boxplot() \nplot(p5)\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"Favorite-legume-height-stratified.png\")\nggsave(filename = figure_file, plot=p5)\n\nSaving 7 x 5 in image\n\n\nCreate a scatter plot with weight as a function of VO2 Max.\n\np6&lt;- mydata %&gt;% ggplot(aes(x=Weight, y =vo2_max)) + geom_point() \nplot(p6)\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"Weight-VO2-Max-stratified.png\")\nggsave(filename = figure_file, plot=p6)\n\nSaving 7 x 5 in image\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "presentation-exercise/data/readme.html",
    "href": "presentation-exercise/data/readme.html",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "This data package contains the data that powers the chart “Food: greenhouse gas emissions across the supply chain” on the Our World in Data website.\n\n\nThe high level structure of the CSV file is that each row is an observation for an entity (usually a country or region) and a timepoint (usually a year).\nThe first two columns in the CSV file are “Entity” and “Code”. “Entity” is the name of the entity (e.g. “United States”). “Code” is the OWID internal entity code that we use if the entity is a country or region. For normal countries, this is the same as the iso alpha-3 code of the entity (e.g. “USA”) - for non-standard countries like historical countries these are custom codes.\nThe third column is either “Year” or “Day”. If the data is annual, this is “Year” and contains only the year as an integer. If the column is “Day”, the column contains a date string in the form “YYYY-MM-DD”.\nThe remaining columns are the data columns, each of which is a time series. If the CSV data is downloaded using the “full data” option, then each column corresponds to one time series below. If the CSV data is downloaded using the “only selected data visible in the chart” option then the data columns are transformed depending on the chart type and thus the association with the time series might not be as straightforward.\n\n\n\nThe .metadata.json file contains metadata about the data package. The “charts” key contains information to recreate the chart, like the title, subtitle etc.. The “columns” key contains information about each of the columns in the csv, like the unit, timespan covered, citation for the data etc..\n\n\n\nOur World in Data is almost never the original producer of the data - almost all of the data we use has been compiled by others. If you want to re-use data, it is your responsibility to ensure that you adhere to the sources’ license and to credit them correctly. Please note that a single time series may have more than one source - e.g. when we stich together data from different time periods by different producers or when we calculate per capita metrics using population data from a second source.\n\n\nAll data and visualizations on Our World in Data rely on data sourced from one or several original data providers. Preparing this original data involves several processing steps. Depending on the data, this can include standardizing country names and world region definitions, converting units, calculating derived indicators such as per capita measures, as well as adding or adapting metadata such as the name or the description given to an indicator. Read about our data pipeline\n\n\n\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Land use change” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Farm” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Animal feed” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Processing” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Transport” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Retail” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Packaging” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product.\n\n\n\n\n\n\n\n\nIf you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Losses” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#csv-structure",
    "href": "presentation-exercise/data/readme.html#csv-structure",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "The high level structure of the CSV file is that each row is an observation for an entity (usually a country or region) and a timepoint (usually a year).\nThe first two columns in the CSV file are “Entity” and “Code”. “Entity” is the name of the entity (e.g. “United States”). “Code” is the OWID internal entity code that we use if the entity is a country or region. For normal countries, this is the same as the iso alpha-3 code of the entity (e.g. “USA”) - for non-standard countries like historical countries these are custom codes.\nThe third column is either “Year” or “Day”. If the data is annual, this is “Year” and contains only the year as an integer. If the column is “Day”, the column contains a date string in the form “YYYY-MM-DD”.\nThe remaining columns are the data columns, each of which is a time series. If the CSV data is downloaded using the “full data” option, then each column corresponds to one time series below. If the CSV data is downloaded using the “only selected data visible in the chart” option then the data columns are transformed depending on the chart type and thus the association with the time series might not be as straightforward."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#metadata.json-structure",
    "href": "presentation-exercise/data/readme.html#metadata.json-structure",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "The .metadata.json file contains metadata about the data package. The “charts” key contains information to recreate the chart, like the title, subtitle etc.. The “columns” key contains information about each of the columns in the csv, like the unit, timespan covered, citation for the data etc.."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#about-the-data",
    "href": "presentation-exercise/data/readme.html#about-the-data",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "Our World in Data is almost never the original producer of the data - almost all of the data we use has been compiled by others. If you want to re-use data, it is your responsibility to ensure that you adhere to the sources’ license and to credit them correctly. Please note that a single time series may have more than one source - e.g. when we stich together data from different time periods by different producers or when we calculate per capita metrics using population data from a second source.\n\n\nAll data and visualizations on Our World in Data rely on data sourced from one or several original data providers. Preparing this original data involves several processing steps. Depending on the data, this can include standardizing country names and world region definitions, converting units, calculating derived indicators such as per capita measures, as well as adding or adapting metadata such as the name or the description given to an indicator. Read about our data pipeline"
  },
  {
    "objectID": "presentation-exercise/data/readme.html#land-use-change",
    "href": "presentation-exercise/data/readme.html#land-use-change",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Land use change” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#farm",
    "href": "presentation-exercise/data/readme.html#farm",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Farm” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#animal-feed",
    "href": "presentation-exercise/data/readme.html#animal-feed",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Animal feed” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#processing",
    "href": "presentation-exercise/data/readme.html#processing",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Processing” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#transport",
    "href": "presentation-exercise/data/readme.html#transport",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Transport” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#retail",
    "href": "presentation-exercise/data/readme.html#retail",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Retail” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#packaging",
    "href": "presentation-exercise/data/readme.html#packaging",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Packaging” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "presentation-exercise/data/readme.html#losses",
    "href": "presentation-exercise/data/readme.html#losses",
    "title": "Food: greenhouse gas emissions across the supply chain - Data package",
    "section": "",
    "text": "If you have limited space (e.g. in data visualizations), you can use this abbreviated in-line citation:\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data\n\n\n\nPoore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World in Data. “Losses” [dataset]. Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. [original data]. Source: Poore, J., & Nemecek, T. (2018). Reducing food’s environmental impacts through producers and consumers. Science, 360(6392), 987-992. – processed by Our World In Data\n\n\n\n\nData is based on the largest meta-analysis of food system impact studies to date, from Poore & Nemecek’s 2018 study.\nThe authors note the following about the scope of the studies included in this meta-analysis: “We derived data from a comprehensive meta-analysis, identifying 1530 studies for potential inclusion, which were supplemented with additional data received from 139 authors. Studies were assessed against 11 criteria designed to standardize methodology, resulting in 570 suitable studies with a median reference year of 2010. The data set covers ~38,700 commercially viable farms in 119 countries and 40 products representing ~90% of global protein and calorie consumption’.\nAll comparisons here are based on the global mean value per food product across all studies.\nComparisons can be made in functional units: here all comparisons are made as impacts per kilogram of product."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to my website and portfolio!",
    "section": "",
    "text": "Hello!\nThis is my website and portfolio, created for Modern Applied Data Analysis (MADA) course at the University of Georgia.\nCheers🥳\n-Murphy"
  },
  {
    "objectID": "fitting-exercise/data/readme.html",
    "href": "fitting-exercise/data/readme.html",
    "title": "Data",
    "section": "",
    "text": "Data\nMavoglurant_A2121_nmpk.csv contains the raw data. Data are processing in fitting-exercise.qmd. Final variables included in the cleaned data include: * id: a uniqie patient identifier * dose: dose of drug recived by patient * age: age of patient * sex: sex of patient. levels include “1” and “2”. additional information not available. * race: race of patient. levels include “1”, “2”, “7”, and “99”. additional information not available. * wt: likely weight of patient but unverified. additional information of measurement not available. * ht: likely height of patient but unverified. additional information of measurement not available."
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html",
    "href": "fitting-exercise/code/fitting-exercise.html",
    "title": "fitting-exercise",
    "section": "",
    "text": "# load packages\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(gtsummary)\n\nWarning: package 'gtsummary' was built under R version 4.4.2\n\n\n\n# load data\ndat &lt;- read.csv(\n  here::here(\"fitting-exercise/data/Mavoglurant_A2121_nmpk.csv\")\n  )\n\nnames(dat) &lt;- tolower(names(dat))\n\n\n\n\n\n# plot time by dv for each id, stratified by dose\nplot &lt;- ggplot(dat) +\n  geom_line(aes(x=time, y=dv, group=id)) +\n  facet_wrap(~dose)\n\nprint(plot)\n\n\n\n\n\n\n\n\n\n\n\n\n# keep only obs where occ=1\ndat1 &lt;- dat %&gt;%\n  filter(occ == 1)\n\n\n# exclude obs where time=0, sum dv for each id\ndat2 &lt;- dat1 %&gt;%\n  filter(time != 0) %&gt;%\n  group_by(id) %&gt;%\n  summarize(\n    Y = sum(dv)\n  )\n\n# create df with time=0 obs only\ndat3 &lt;- dat1 %&gt;%\n  filter(time == 0)\n\n# join by id\ndat4 &lt;- full_join(x=dat2, y=dat3, by=\"id\")\n\n\n# convert race and sex to factors\n# keep only Y, dose, age, sex, race, wt, ht\ndat5 &lt;- dat4 %&gt;%\n  mutate(\n    race = factor(race),\n    sex = factor(sex)\n  ) %&gt;%\n  select(\n    Y, dose, age, sex, race, wt, ht\n  )\n\nstr(dat5)\n\ntibble [120 × 7] (S3: tbl_df/tbl/data.frame)\n $ Y   : num [1:120] 2691 2639 2150 1789 3126 ...\n $ dose: num [1:120] 25 25 25 25 25 25 25 25 25 25 ...\n $ age : int [1:120] 42 24 31 46 41 27 23 20 23 28 ...\n $ sex : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ race: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 1 1 2 2 1 4 2 1 ...\n $ wt  : num [1:120] 94.3 80.4 71.8 77.4 64.3 ...\n $ ht  : num [1:120] 1.77 1.76 1.81 1.65 1.56 ...\n\n# save as rds\nsaveRDS(dat5, here::here(\"fitting-exercise/data/mavoglurant-processed.rds\"))\n\n\n\n\n\n# participant demographics by dose\ntable1 &lt;- dat5 %&gt;%\n  gtsummary::tbl_summary(\n    include = c(age, sex, race, wt, ht),\n    by = dose\n  ) %&gt;%\n  gtsummary::as_kable()\n\nprint(table1)\n\n\n\n|**Characteristic** |  **25**  N = 59   | **37.5**  N = 12  |  **50**  N = 49   |\n|:------------------|:-----------------:|:-----------------:|:-----------------:|\n|age                |    30 (26, 40)    |    38 (27, 45)    |    32 (26, 39)    |\n|sex                |                   |                   |                   |\n|1                  |     49 (83%)      |     10 (83%)      |     45 (92%)      |\n|2                  |     10 (17%)      |      2 (17%)      |     4 (8.2%)      |\n|race               |                   |                   |                   |\n|1                  |     32 (54%)      |     10 (83%)      |     32 (65%)      |\n|2                  |     21 (36%)      |      2 (17%)      |     13 (27%)      |\n|7                  |     1 (1.7%)      |      0 (0%)       |     1 (2.0%)      |\n|88                 |     5 (8.5%)      |      0 (0%)       |     3 (6.1%)      |\n|wt                 |    81 (72, 90)    |    80 (72, 86)    |    83 (75, 93)    |\n|ht                 | 1.77 (1.70, 1.82) | 1.74 (1.68, 1.82) | 1.78 (1.73, 1.81) |\n\n\n\n# plot Y by dose\nplot1 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=factor(dose), y=Y))\n\nprint(plot1)\n\n\n\n\n\n\n\n\nBoxplot of dose by Y should 2 individuals of dose 25 with higher Y values, 1 individual od dose 50 with higher Y value.\n\n# plot Y by age\nplot2 &lt;- ggplot(dat5) +\n  geom_point(aes(x=age, y=Y))\n\nprint(plot2)\n\n\n\n\n\n\n\n\nScatterplot of age by Y appears randomly distributed.\n\n# plot Y by sex\nplot3 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=sex, y=Y))\n\nprint(plot3)\n\n\n\n\n\n\n\n\nBoxplot of sex by Y shows one individual of sex 1 and one individual of sex 2 with higher values of Y.\n\n# distribution of Y\nhist1 &lt;- ggplot(dat5) +\n  geom_histogram(aes(Y))\n\nprint(hist1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of Y is right-skewed with some high-value outliers.\n\n# distribution of dose\nbar1 &lt;- ggplot(dat5) +\n  geom_bar(aes(factor(dose)))\n\nprint(bar1)\n\n\n\n\n\n\n\n\nBar plot of dose shows that more individuals recieve dose 25 or 50 than dose 37.5.\n\n# distribution of age\nhist2 &lt;- ggplot(dat5) +\n  geom_histogram(aes(age))\n\nprint(hist2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of age appears multimodal. Most individuals are either late-20s or late-30s.\n\n# distribution of sex\nbar2 &lt;- ggplot(dat5) +\n  geom_bar(aes(sex))\n\nprint(bar2)\n\n\n\n\n\n\n\n\nBar plot of sex shows that most individuals are of sex 1.\n\n# distribution of race\nbar3 &lt;- ggplot(dat5) +\n  geom_bar(aes(race))\n\nprint(bar3)\n\n\n\n\n\n\n\n\nBar plot of race shows that most individuals are of race 1. Some are of race 2 and few are of races 7 and 88.\n\n# distribution of wt\nhist3 &lt;- ggplot(dat5) +\n  geom_histogram(aes(wt))\n\nprint(hist3)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of weight shows a normal distribution.\n\n# distribution of ht\nhist4 &lt;- ggplot(dat5) +\n  geom_histogram(aes(ht))\n\nprint(hist4)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of height shows normal to slightly left-skewed distribution.\n\nplot4 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=sex, y=wt))\n\nprint(plot4)\n\n\n\n\n\n\n\n\nBoxplot of sex by height shows that sex 1 has larger values for weight than sex 2\n\nplot5 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=sex, y=ht))\n\nprint(plot5)\n\n\n\n\n\n\n\n\nBoxplot of sex by height shows that sex 1 has larger values for height than sex 2\n\n# pair plot\npairs(dat5)\n\n\n\n\n\n\n\n\nPair plot shows general relationships between variables. Y seems positively associated with dose. Weight and height show a positive linear relationship.\n\n\n\n\n\n\n# linear model to Y using dose\nfit1 &lt;- parsnip::linear_reg() %&gt;%\n  parsnip::fit(\n    Y ~ dose, \n    data=dat5\n  )\n\nbroom::tidy(fit1)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    323.     199.        1.62 1.07e- 1\n2 dose            58.2      5.19     11.2  2.69e-20\n\n# predict Y\nfit1_pred &lt;- predict(\n  fit1,\n  new_data=dat5\n)\n\n# combine real data with predictions\nfit1_result &lt;- dat5 %&gt;%\n  select(Y, dose) %&gt;%\n  bind_cols(fit1_pred)\n\n# calculate rmse\nfit1_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        666.\n\n# calculate R squared\nfit1_result %&gt;%\n  yardstick::rsq(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rsq     standard       0.516\n\n\nRMSE = 666 and R-squared = 0.516\n\n# linear model to Y using all predictors\nfit2 &lt;- parsnip::linear_reg() %&gt;%\n  parsnip::fit(\n    Y ~ dose + age + sex + race + wt + ht, \n    data=dat5\n  )\n\nbroom::tidy(fit2)\n\n# A tibble: 9 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  3387.     1835.       1.85  6.76e- 2\n2 dose           59.9       4.88    12.3   2.05e-22\n3 age             3.16      7.82     0.403 6.88e- 1\n4 sex2         -358.      217.      -1.65  1.02e- 1\n5 race2         155.      129.       1.21  2.31e- 1\n6 race7        -405.      448.      -0.904 3.68e- 1\n7 race88        -53.5     245.      -0.219 8.27e- 1\n8 wt            -23.0       6.40    -3.60  4.71e- 4\n9 ht           -748.     1104.      -0.678 4.99e- 1\n\n# predict Y\nfit2_pred &lt;- predict(\n  fit2,\n  new_data=dat5\n)\n\n# combine real data with predictions\nfit2_result &lt;- dat5 %&gt;%\n  select(Y, dose, age, sex, race, wt, ht) %&gt;%\n  bind_cols(fit2_pred)\n\n# calculate rmse\nfit2_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        591.\n\n# calculate R squared\nfit2_result %&gt;%\n  yardstick::rsq(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rsq     standard       0.619\n\n\nRMSE = 591 and R-squared = 0.619\nThe full model, with all predictors included, has a lower RMSE, which indicated lower error, then the reduced model, with dose as the only predictor. The full model also has a higher R-squared value, indicating a better fit then the reduced model.\n\n\n\n\n# logistic model to sex using dose\nfit3 &lt;- parsnip::logistic_reg() %&gt;%\n  parsnip::fit(\n    sex ~ dose, \n    data=dat5\n  )\n\nbroom::tidy(fit3)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)  -0.765     0.854     -0.896   0.370\n2 dose         -0.0318    0.0243    -1.31    0.192\n\n# predict sex\nfit3_pred &lt;- predict(\n  fit3,\n  new_data=dat5\n)\n\n# get prediction probabilities\nfit3_prob &lt;- predict(\n  fit3,\n  new_data = dat5,\n  type = \"prob\"\n)\n\n# combine real data with predictions\nfit3_result &lt;- dat5 %&gt;%\n  select(sex, dose) %&gt;%\n  bind_cols(fit3_pred, fit3_prob)\n\n# compute accuracy\nyardstick::accuracy(\n  fit3_result, \n  truth = sex,\n  estimate = .pred_class\n)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.867\n\n# compute ROC-AUC\nyardstick::roc_auc(\n  fit3_result, \n  truth=sex, \n  .pred_1\n)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.592\n\n\nThe model classification accuracy is about 86.7%.\nThe model has a ROC-AUC of 0.592 indicating predictive performance is low, just slightly better than random guessing.\n\n# logistic model to sex using all predictors\nfit4 &lt;- parsnip::logistic_reg() %&gt;%\n  parsnip::fit(\n    sex ~ Y + dose + age + race + wt + ht, \n    data=dat5\n  )\n\nbroom::tidy(fit4)\n\n# A tibble: 9 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  60.3     18.0         3.34   0.000824\n2 Y            -0.00104  0.000963   -1.08   0.280   \n3 dose         -0.0308   0.0776     -0.396  0.692   \n4 age           0.0834   0.0607      1.37   0.170   \n5 race2        -1.93     1.37       -1.40   0.161   \n6 race7         0.118    3.85        0.0306 0.976   \n7 race88       -1.50     2.19       -0.683  0.494   \n8 wt           -0.0628   0.0794     -0.791  0.429   \n9 ht          -33.2     11.1        -3.00   0.00274 \n\n# predict sex\nfit4_pred &lt;- predict(\n  fit4,\n  new_data=dat5\n)\n\n# get prediction probabilities\nfit4_prob &lt;- predict(\n  fit4,\n  new_data = dat5,\n  type = \"prob\"\n)\n\n# combine real data with predictions\nfit4_result &lt;- dat5 %&gt;%\n  select(sex, Y, dose, age, race, wt, ht) %&gt;%\n  bind_cols(fit4_pred, fit4_prob)\n\n# compute accuracy\nyardstick::accuracy(\n  fit4_result, \n  truth = sex,\n  estimate = .pred_class\n)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.942\n\n# compute ROC-AUC\nyardstick::roc_auc(\n  fit4_result, \n  truth=sex, \n  .pred_1\n)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.980\n\n\nThe model classification accuracy is about 94.7%.\nThe model has a ROC-AUC of 0.980 indicating overall good predictive performance."
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#setup",
    "href": "fitting-exercise/code/fitting-exercise.html#setup",
    "title": "fitting-exercise",
    "section": "",
    "text": "# load packages\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(gtsummary)\n\nWarning: package 'gtsummary' was built under R version 4.4.2\n\n\n\n# load data\ndat &lt;- read.csv(\n  here::here(\"fitting-exercise/data/Mavoglurant_A2121_nmpk.csv\")\n  )\n\nnames(dat) &lt;- tolower(names(dat))"
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#initial-eda",
    "href": "fitting-exercise/code/fitting-exercise.html#initial-eda",
    "title": "fitting-exercise",
    "section": "",
    "text": "# plot time by dv for each id, stratified by dose\nplot &lt;- ggplot(dat) +\n  geom_line(aes(x=time, y=dv, group=id)) +\n  facet_wrap(~dose)\n\nprint(plot)"
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#initial-processing",
    "href": "fitting-exercise/code/fitting-exercise.html#initial-processing",
    "title": "fitting-exercise",
    "section": "",
    "text": "# keep only obs where occ=1\ndat1 &lt;- dat %&gt;%\n  filter(occ == 1)\n\n\n# exclude obs where time=0, sum dv for each id\ndat2 &lt;- dat1 %&gt;%\n  filter(time != 0) %&gt;%\n  group_by(id) %&gt;%\n  summarize(\n    Y = sum(dv)\n  )\n\n# create df with time=0 obs only\ndat3 &lt;- dat1 %&gt;%\n  filter(time == 0)\n\n# join by id\ndat4 &lt;- full_join(x=dat2, y=dat3, by=\"id\")\n\n\n# convert race and sex to factors\n# keep only Y, dose, age, sex, race, wt, ht\ndat5 &lt;- dat4 %&gt;%\n  mutate(\n    race = factor(race),\n    sex = factor(sex)\n  ) %&gt;%\n  select(\n    Y, dose, age, sex, race, wt, ht\n  )\n\nstr(dat5)\n\ntibble [120 × 7] (S3: tbl_df/tbl/data.frame)\n $ Y   : num [1:120] 2691 2639 2150 1789 3126 ...\n $ dose: num [1:120] 25 25 25 25 25 25 25 25 25 25 ...\n $ age : int [1:120] 42 24 31 46 41 27 23 20 23 28 ...\n $ sex : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ race: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 1 1 2 2 1 4 2 1 ...\n $ wt  : num [1:120] 94.3 80.4 71.8 77.4 64.3 ...\n $ ht  : num [1:120] 1.77 1.76 1.81 1.65 1.56 ...\n\n# save as rds\nsaveRDS(dat5, here::here(\"fitting-exercise/data/mavoglurant-processed.rds\"))"
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#eda",
    "href": "fitting-exercise/code/fitting-exercise.html#eda",
    "title": "fitting-exercise",
    "section": "",
    "text": "# participant demographics by dose\ntable1 &lt;- dat5 %&gt;%\n  gtsummary::tbl_summary(\n    include = c(age, sex, race, wt, ht),\n    by = dose\n  ) %&gt;%\n  gtsummary::as_kable()\n\nprint(table1)\n\n\n\n|**Characteristic** |  **25**  N = 59   | **37.5**  N = 12  |  **50**  N = 49   |\n|:------------------|:-----------------:|:-----------------:|:-----------------:|\n|age                |    30 (26, 40)    |    38 (27, 45)    |    32 (26, 39)    |\n|sex                |                   |                   |                   |\n|1                  |     49 (83%)      |     10 (83%)      |     45 (92%)      |\n|2                  |     10 (17%)      |      2 (17%)      |     4 (8.2%)      |\n|race               |                   |                   |                   |\n|1                  |     32 (54%)      |     10 (83%)      |     32 (65%)      |\n|2                  |     21 (36%)      |      2 (17%)      |     13 (27%)      |\n|7                  |     1 (1.7%)      |      0 (0%)       |     1 (2.0%)      |\n|88                 |     5 (8.5%)      |      0 (0%)       |     3 (6.1%)      |\n|wt                 |    81 (72, 90)    |    80 (72, 86)    |    83 (75, 93)    |\n|ht                 | 1.77 (1.70, 1.82) | 1.74 (1.68, 1.82) | 1.78 (1.73, 1.81) |\n\n\n\n# plot Y by dose\nplot1 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=factor(dose), y=Y))\n\nprint(plot1)\n\n\n\n\n\n\n\n\nBoxplot of dose by Y should 2 individuals of dose 25 with higher Y values, 1 individual od dose 50 with higher Y value.\n\n# plot Y by age\nplot2 &lt;- ggplot(dat5) +\n  geom_point(aes(x=age, y=Y))\n\nprint(plot2)\n\n\n\n\n\n\n\n\nScatterplot of age by Y appears randomly distributed.\n\n# plot Y by sex\nplot3 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=sex, y=Y))\n\nprint(plot3)\n\n\n\n\n\n\n\n\nBoxplot of sex by Y shows one individual of sex 1 and one individual of sex 2 with higher values of Y.\n\n# distribution of Y\nhist1 &lt;- ggplot(dat5) +\n  geom_histogram(aes(Y))\n\nprint(hist1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of Y is right-skewed with some high-value outliers.\n\n# distribution of dose\nbar1 &lt;- ggplot(dat5) +\n  geom_bar(aes(factor(dose)))\n\nprint(bar1)\n\n\n\n\n\n\n\n\nBar plot of dose shows that more individuals recieve dose 25 or 50 than dose 37.5.\n\n# distribution of age\nhist2 &lt;- ggplot(dat5) +\n  geom_histogram(aes(age))\n\nprint(hist2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of age appears multimodal. Most individuals are either late-20s or late-30s.\n\n# distribution of sex\nbar2 &lt;- ggplot(dat5) +\n  geom_bar(aes(sex))\n\nprint(bar2)\n\n\n\n\n\n\n\n\nBar plot of sex shows that most individuals are of sex 1.\n\n# distribution of race\nbar3 &lt;- ggplot(dat5) +\n  geom_bar(aes(race))\n\nprint(bar3)\n\n\n\n\n\n\n\n\nBar plot of race shows that most individuals are of race 1. Some are of race 2 and few are of races 7 and 88.\n\n# distribution of wt\nhist3 &lt;- ggplot(dat5) +\n  geom_histogram(aes(wt))\n\nprint(hist3)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of weight shows a normal distribution.\n\n# distribution of ht\nhist4 &lt;- ggplot(dat5) +\n  geom_histogram(aes(ht))\n\nprint(hist4)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nHistogram of height shows normal to slightly left-skewed distribution.\n\nplot4 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=sex, y=wt))\n\nprint(plot4)\n\n\n\n\n\n\n\n\nBoxplot of sex by height shows that sex 1 has larger values for weight than sex 2\n\nplot5 &lt;- ggplot(dat5) +\n  geom_boxplot(aes(x=sex, y=ht))\n\nprint(plot5)\n\n\n\n\n\n\n\n\nBoxplot of sex by height shows that sex 1 has larger values for height than sex 2\n\n# pair plot\npairs(dat5)\n\n\n\n\n\n\n\n\nPair plot shows general relationships between variables. Y seems positively associated with dose. Weight and height show a positive linear relationship."
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#model-fitting",
    "href": "fitting-exercise/code/fitting-exercise.html#model-fitting",
    "title": "fitting-exercise",
    "section": "",
    "text": "# linear model to Y using dose\nfit1 &lt;- parsnip::linear_reg() %&gt;%\n  parsnip::fit(\n    Y ~ dose, \n    data=dat5\n  )\n\nbroom::tidy(fit1)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    323.     199.        1.62 1.07e- 1\n2 dose            58.2      5.19     11.2  2.69e-20\n\n# predict Y\nfit1_pred &lt;- predict(\n  fit1,\n  new_data=dat5\n)\n\n# combine real data with predictions\nfit1_result &lt;- dat5 %&gt;%\n  select(Y, dose) %&gt;%\n  bind_cols(fit1_pred)\n\n# calculate rmse\nfit1_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        666.\n\n# calculate R squared\nfit1_result %&gt;%\n  yardstick::rsq(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rsq     standard       0.516\n\n\nRMSE = 666 and R-squared = 0.516\n\n# linear model to Y using all predictors\nfit2 &lt;- parsnip::linear_reg() %&gt;%\n  parsnip::fit(\n    Y ~ dose + age + sex + race + wt + ht, \n    data=dat5\n  )\n\nbroom::tidy(fit2)\n\n# A tibble: 9 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  3387.     1835.       1.85  6.76e- 2\n2 dose           59.9       4.88    12.3   2.05e-22\n3 age             3.16      7.82     0.403 6.88e- 1\n4 sex2         -358.      217.      -1.65  1.02e- 1\n5 race2         155.      129.       1.21  2.31e- 1\n6 race7        -405.      448.      -0.904 3.68e- 1\n7 race88        -53.5     245.      -0.219 8.27e- 1\n8 wt            -23.0       6.40    -3.60  4.71e- 4\n9 ht           -748.     1104.      -0.678 4.99e- 1\n\n# predict Y\nfit2_pred &lt;- predict(\n  fit2,\n  new_data=dat5\n)\n\n# combine real data with predictions\nfit2_result &lt;- dat5 %&gt;%\n  select(Y, dose, age, sex, race, wt, ht) %&gt;%\n  bind_cols(fit2_pred)\n\n# calculate rmse\nfit2_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        591.\n\n# calculate R squared\nfit2_result %&gt;%\n  yardstick::rsq(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rsq     standard       0.619\n\n\nRMSE = 591 and R-squared = 0.619\nThe full model, with all predictors included, has a lower RMSE, which indicated lower error, then the reduced model, with dose as the only predictor. The full model also has a higher R-squared value, indicating a better fit then the reduced model.\n\n\n\n\n# logistic model to sex using dose\nfit3 &lt;- parsnip::logistic_reg() %&gt;%\n  parsnip::fit(\n    sex ~ dose, \n    data=dat5\n  )\n\nbroom::tidy(fit3)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)  -0.765     0.854     -0.896   0.370\n2 dose         -0.0318    0.0243    -1.31    0.192\n\n# predict sex\nfit3_pred &lt;- predict(\n  fit3,\n  new_data=dat5\n)\n\n# get prediction probabilities\nfit3_prob &lt;- predict(\n  fit3,\n  new_data = dat5,\n  type = \"prob\"\n)\n\n# combine real data with predictions\nfit3_result &lt;- dat5 %&gt;%\n  select(sex, dose) %&gt;%\n  bind_cols(fit3_pred, fit3_prob)\n\n# compute accuracy\nyardstick::accuracy(\n  fit3_result, \n  truth = sex,\n  estimate = .pred_class\n)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.867\n\n# compute ROC-AUC\nyardstick::roc_auc(\n  fit3_result, \n  truth=sex, \n  .pred_1\n)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.592\n\n\nThe model classification accuracy is about 86.7%.\nThe model has a ROC-AUC of 0.592 indicating predictive performance is low, just slightly better than random guessing.\n\n# logistic model to sex using all predictors\nfit4 &lt;- parsnip::logistic_reg() %&gt;%\n  parsnip::fit(\n    sex ~ Y + dose + age + race + wt + ht, \n    data=dat5\n  )\n\nbroom::tidy(fit4)\n\n# A tibble: 9 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  60.3     18.0         3.34   0.000824\n2 Y            -0.00104  0.000963   -1.08   0.280   \n3 dose         -0.0308   0.0776     -0.396  0.692   \n4 age           0.0834   0.0607      1.37   0.170   \n5 race2        -1.93     1.37       -1.40   0.161   \n6 race7         0.118    3.85        0.0306 0.976   \n7 race88       -1.50     2.19       -0.683  0.494   \n8 wt           -0.0628   0.0794     -0.791  0.429   \n9 ht          -33.2     11.1        -3.00   0.00274 \n\n# predict sex\nfit4_pred &lt;- predict(\n  fit4,\n  new_data=dat5\n)\n\n# get prediction probabilities\nfit4_prob &lt;- predict(\n  fit4,\n  new_data = dat5,\n  type = \"prob\"\n)\n\n# combine real data with predictions\nfit4_result &lt;- dat5 %&gt;%\n  select(sex, Y, dose, age, race, wt, ht) %&gt;%\n  bind_cols(fit4_pred, fit4_prob)\n\n# compute accuracy\nyardstick::accuracy(\n  fit4_result, \n  truth = sex,\n  estimate = .pred_class\n)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.942\n\n# compute ROC-AUC\nyardstick::roc_auc(\n  fit4_result, \n  truth=sex, \n  .pred_1\n)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.980\n\n\nThe model classification accuracy is about 94.7%.\nThe model has a ROC-AUC of 0.980 indicating overall good predictive performance."
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#part-1",
    "href": "fitting-exercise/code/fitting-exercise.html#part-1",
    "title": "fitting-exercise",
    "section": "Part 1",
    "text": "Part 1\n\nSetup\n\n# set seed\nrngseed = 1234\n\n\n# remove race variable\ndat6 &lt;- dat5 %&gt;%\n  select(!race)\n\n\nset.seed(rngseed)\n\n# put 75% of the data into the training set \ndata_split &lt;- rsample::initial_split(dat6, prop = 3/4)\n\n# Create data frames for the two sets:\ntrain_data &lt;- rsample::training(data_split)\ntest_data  &lt;- rsample::testing(data_split)\n\n\n\nModel Fitting\n\nPart 1\n\n# linear model to Y using dose\nfit5 &lt;- parsnip::linear_reg() %&gt;%\n  parsnip::fit(\n    Y ~ dose, \n    data=train_data\n  )\n\nbroom::tidy(fit5)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    535.     244.        2.19 3.08e- 2\n2 dose            53.4      6.29      8.50 4.41e-13\n\n# predict Y\nfit5_pred &lt;- predict(\n  fit5,\n  new_data=train_data\n)\n\n# combine real data with predictions\nfit5_result &lt;- train_data %&gt;%\n  select(Y, dose) %&gt;%\n  bind_cols(fit5_pred)\n\n# calculate rmse\nfit5_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        703.\n\n# calculate R squared\nfit5_result %&gt;%\n  yardstick::rsq(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rsq     standard       0.451\n\n\nRMSE = 703 and R-squared = 0.451\n\n# linear model to Y using all predictors\nfit6 &lt;- parsnip::linear_reg() %&gt;%\n  parsnip::fit(\n    Y ~ dose + age + sex + wt + ht, \n    data=train_data\n  )\n\nbroom::tidy(fit6)\n\n# A tibble: 6 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  4397.      2170.      2.03   4.59e- 2\n2 dose           55.3        5.83    9.49   6.09e-15\n3 age            -0.417      9.50   -0.0439 9.65e- 1\n4 sex2         -569.       285.     -1.99   4.95e- 2\n5 wt            -22.6        7.65   -2.96   4.00e- 3\n6 ht          -1130.      1358.     -0.832  4.08e- 1\n\n# predict Y\nfit6_pred &lt;- predict(\n  fit6,\n  new_data=train_data\n)\n\n# combine real data with predictions\nfit6_result &lt;- train_data %&gt;%\n  select(Y, dose, age, sex, wt, ht) %&gt;%\n  bind_cols(fit6_pred)\n\n# calculate rmse\nfit6_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        627.\n\n# calculate R squared\nfit6_result %&gt;%\n  yardstick::rsq(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rsq     standard       0.562\n\n\nRMSE = 627 and R-squared = 0.562\n\n# compute rmse of null model\n\nnull &lt;- parsnip::null_model() %&gt;%\n  parsnip::set_engine(\"parsnip\") %&gt;%\n  parsnip::set_mode(\"regression\") %&gt;%\n  parsnip::fit(Y ~ ., data = train_data)\n\n# predict Y\nnull_pred &lt;- predict(\n  null,\n  new_data=train_data\n)\n\n# combine real data with predictions\nnull_result &lt;- train_data %&gt;%\n  select(Y) %&gt;%\n  bind_cols(null_pred)\n\n# calculate rmse\nnull_result %&gt;%\n  yardstick::rmse(\n    truth=Y, \n    estimate=.pred\n  )\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        948.\n\n\nRMSE = 948\n\nResults\nThe RMSE of the full model is the lowest, at 627. This indicates that the full model is predicting values closer to the actual data than both the null and univariable models.\n\n\n\nPart 2\n\n# setup\n\n# fit model with resampling\nset.seed(rngseed)\n\n# define linear model specification\nmodel_spec &lt;- parsnip::linear_reg() %&gt;% \n  parsnip::set_engine(\"lm\") %&gt;% \n  parsnip::set_mode(\"regression\")\n\n# define null model specification\nnull_spec &lt;- parsnip::null_model() %&gt;%\n  parsnip::set_engine(\"parsnip\") %&gt;%\n  parsnip::set_mode(\"regression\")\n\n# create folds\nfolds &lt;- rsample::vfold_cv(train_data, v = 10)\n\n\n# linear model to Y using dose\nfit_wf1 &lt;- workflows::workflow() %&gt;%\n  workflows::add_model(model_spec) %&gt;%\n  workflows::add_formula(Y ~ dose)\n\nfit_rs1 &lt;- fit_wf1 %&gt;%\n  tune::fit_resamples(folds)\n\nWarning: package 'parsnip' was built under R version 4.4.2\n\ntune::collect_metrics(fit_rs1)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   691.       10 67.5    Preprocessor1_Model1\n2 rsq     standard     0.512    10  0.0592 Preprocessor1_Model1\n\n\nRMSE = 691, SE = 67.5; R-squared = 0.512, SE = 0.0592\n\n# linear model to Y using all predictors\nfit_wf2 &lt;- workflows::workflow() %&gt;%\n  workflows::add_model(model_spec) %&gt;%\n  workflows::add_formula(Y ~ dose + age + sex + wt + ht)\n\nfit_rs2 &lt;- fit_wf2 %&gt;%\n  tune::fit_resamples(folds)\n\ntune::collect_metrics(fit_rs2)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   646.       10 64.8    Preprocessor1_Model1\n2 rsq     standard     0.573    10  0.0686 Preprocessor1_Model1\n\n\nRMSE = 646, SE = 64.8; R-squared = 0.573, SE = 0.0686\n\n# null model\nfit_wf_null &lt;- workflows::workflow() %&gt;%\n  workflows::add_model(null_spec) %&gt;%\n  workflows::add_formula(Y ~ .)\n\nfit_rs_null &lt;- fit_wf_null %&gt;%\n  tune::fit_resamples(folds)\n\n→ A | warning: A correlation computation is required, but `estimate` is constant and has 0\n               standard deviation, resulting in a divide by 0 error. `NA` will be returned.\n\n\nThere were issues with some computations   A: x1\n\n\nThere were issues with some computations   A: x10\n\n\n\n\ntune::collect_metrics(fit_rs_null)\n\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    933.    10    76.7 Preprocessor1_Model1\n2 rsq     standard    NaN      0    NA   Preprocessor1_Model1\n\n\nRMSE = 933, SE = 76.7\n\nResults\nThe original RMSE value for the univariable model was 703, compared to the new value of 691. Using the cross-validation method to evaluate this model resulted in a better estimated fit. The standard error is 67.5, which is relatively large. This indicates that the RMSE varies considerably across folds, possibly suggesting an unstable model or high data variability.\nThe original RMSE value for the full model was 627, compared to the new value of 646. Using the cross-validation method to evaluate this model resulted in a weaker estimated fit. The standard error is 64.8, which is relatively large. This indicates that the RMSE varies considerably across folds, possibly suggesting an unstable model or high data variability.\nThe RMSE values for the null model are similar.\n\n\n\nChanging the seed\n\n# setup\n\n# fit model with resampling\nset.seed(333)\n\n# define linear model specification\nmodel_spec &lt;- parsnip::linear_reg() %&gt;% \n  parsnip::set_engine(\"lm\") %&gt;% \n  parsnip::set_mode(\"regression\")\n\n# define null model specification\nnull_spec &lt;- parsnip::null_model() %&gt;%\n  parsnip::set_engine(\"parsnip\") %&gt;%\n  parsnip::set_mode(\"regression\")\n\n# create folds\nfolds &lt;- rsample::vfold_cv(train_data, v = 10)\n\n\n# linear model to Y using dose\nfit_wf1 &lt;- workflows::workflow() %&gt;%\n  workflows::add_model(model_spec) %&gt;%\n  workflows::add_formula(Y ~ dose)\n\nfit_rs1 &lt;- fit_wf1 %&gt;%\n  tune::fit_resamples(folds)\n\ntune::collect_metrics(fit_rs1)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   706.       10 48.1    Preprocessor1_Model1\n2 rsq     standard     0.484    10  0.0660 Preprocessor1_Model1\n\n\nRMSE = 706, SE = 48.1; R-squared = 0.484\n\n# linear model to Y using all predictors\nfit_wf2 &lt;- workflows::workflow() %&gt;%\n  workflows::add_model(model_spec) %&gt;%\n  workflows::add_formula(Y ~ dose + age + sex + wt + ht)\n\nfit_rs2 &lt;- fit_wf2 %&gt;%\n  tune::fit_resamples(folds)\n\ntune::collect_metrics(fit_rs2)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   645.       10 52.7    Preprocessor1_Model1\n2 rsq     standard     0.566    10  0.0619 Preprocessor1_Model1\n\n\nRMSE = 645, SE = 52.7; R-squared = 0.566, SE = 0.0619\n\n# null model\nfit_wf_null &lt;- workflows::workflow() %&gt;%\n  workflows::add_model(null_spec) %&gt;%\n  workflows::add_formula(Y ~ .)\n\nfit_rs_null &lt;- fit_wf_null %&gt;%\n  tune::fit_resamples(folds)\n\n→ A | warning: A correlation computation is required, but `estimate` is constant and has 0\n               standard deviation, resulting in a divide by 0 error. `NA` will be returned.\n\n\nThere were issues with some computations   A: x1\n\n\nThere were issues with some computations   A: x4\n\n\nThere were issues with some computations   A: x10\n\n\n\n\ntune::collect_metrics(fit_rs_null)\n\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    936.    10    69.1 Preprocessor1_Model1\n2 rsq     standard    NaN      0    NA   Preprocessor1_Model1\n\n\nRMSE = 936, SE = 69.1\n\nResults\nChanging the seed results in different RMSE and SE values. For the univariable model, the new RMSE = 706, SE = 48.1; compared to the previous RMSE = 691, SE = 67.5. Note that if we had originally used this seed, we would have concluded that using cross-validation increases the RMSE for this model. For the full model, the new RMSe = 645, SE = 52.7; compared to the previous RMSE = 646, SE = 64.8. For the null model, the new RMSE = 936, SE = 69.1; compared to the previous RMSE = 933, SE = 76.7."
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#part-2-1",
    "href": "fitting-exercise/code/fitting-exercise.html#part-2-1",
    "title": "fitting-exercise",
    "section": "Part 2",
    "text": "Part 2\n\nThis section added by Shaun van den Hurk\n\n\nLoad necessary libraries\n\nlibrary(tidymodels)  \nlibrary(ggplot2)     \nlibrary(dplyr)       \nlibrary(tidyr) \nlibrary(skimr)\n\nWe will put the training data and predicted vales from the original models (no CV) into a data frame.\n\n#Fit Models on Full Training Data (Not Using CV)\n\n# Simple Model: Using dose only\n\nlm_simple &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  set_mode(\"regression\") %&gt;%\n  fit(Y ~ dose, data = train_data)\n\n# Full Model: Using All Predictors\nlm_full &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  set_mode(\"regression\") %&gt;%\n  fit(Y ~ ., data = train_data)\n\n# Null Model: Predicts the mean of Y for all observations\nnull_spec &lt;- null_model() %&gt;%\n  set_engine(\"parsnip\") %&gt;%\n  set_mode(\"regression\")\n\nnull_fit &lt;- null_spec %&gt;%\n  fit(Y ~ 1, data = train_data)\n\nUsing the models to extract the observed and predicted values\n\n#Extract Observed & Predicted Values for Each Model\n#Get predictions for simple model\npred_simple &lt;- predict(lm_simple, new_data = train_data) %&gt;%\n  bind_cols(train_data) %&gt;%\n  mutate(model = \"Simple Model\")\n\n#Get predictions for full model\npred_full &lt;- predict(lm_full, new_data = train_data) %&gt;%\n  bind_cols(train_data) %&gt;%\n  mutate(model = \"Full Model\")\n\n#Get predictions for null model (mean prediction)\npred_null &lt;- predict(null_fit, new_data = train_data) %&gt;%\n  bind_cols(train_data) %&gt;%\n  mutate(model = \"Null Model\")\n\n#Combine Predictions into one dataframe\ndf_pred &lt;- bind_rows(pred_simple, pred_full, pred_null) %&gt;%\n  select(Y, .pred, model)  # Keep observed values, predictions, and model label\n\n#Pritn the dataframe\nskim(df_pred)\n\n\nData summary\n\n\nName\ndf_pred\n\n\nNumber of rows\n270\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmodel\n0\n1\n10\n12\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nY\n0\n1\n2509.17\n950.11\n826.43\n1800.79\n2398.30\n3126.37\n5606.58\n▅▇▆▂▁\n\n\n.pred\n0\n1\n2509.17\n552.12\n1264.76\n1965.60\n2509.17\n2987.48\n3956.42\n▂▅▇▅▁\n\n\n\n\n#Create a plot for visualization (using ggplot)\nggplot(df_pred, aes(x = Y, y = .pred, color = model, shape = model)) +\n  geom_point(alpha = 0.7, size = 2) +  # Scatter plot \n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"black\") +  # 45-degree line\n  scale_x_continuous(limits = c(0, 5000)) +\n  scale_y_continuous(limits = c(0, 5000)) +\n  labs(\n    title = \"Observed vs. Predicted Values for Three Models\",\n    x = \"Observed Values\",\n    y = \"Predicted Values\",\n    color = \"Model\",\n    shape = \"Model\"\n  ) +\n  theme_minimal() \n\nWarning: Removed 3 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nThe three horizontal lines in the Simple Model that only included the Dose varible is likely owing to the fact that Dose only takes three values in the dataset (25, 37.5 and 50) as these were likely the only different increments tested. Thus we see the grouping in the predictions cause by these three groups.\nAs stated, model 2 (the full model with all predictors) has the best performance and seems to sow some affinity towards the 45 degree line but not a close association and we see more values weighted to the lower left and not an even distribution.\nWe will make a plot of the predicted vs the residuals (predicted-observed) for Model 2. We will add a straight line at 0.\n\n# Compute residuals for the full model (Model 2)\nresiduals_full &lt;- predict(lm_full, new_data = train_data) %&gt;%\n  bind_cols(train_data) %&gt;%\n  mutate(residuals = .pred - Y)  #Compute residuals\n\n#Find maximum residual value to set symmetric y-axis limits\nmax_resid &lt;- max(abs(residuals_full$residuals))  #Get max absolute residual\n\n#Create Residual Plot\nggplot(residuals_full, aes(x = .pred, y = residuals)) +\n  geom_point(alpha = 0.7, size = 2, color = \"blue\") +  #Scatter plot \n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"black\") +  #Reference line at 0\n  scale_y_continuous(limits = c(-max_resid, max_resid)) +  #Symmetric y-axis limits\n  labs(\n    title = \"Residual Plot for Full Model (Model 2)\",\n    x = \"Predicted Values\",\n    y = \"Residuals\"\n  ) +\n  theme_minimal()  \n\n\n\n\n\n\n\n\nWe should see a general cloud of data with no real pattern for this. However that is not the case and we see some aggregation around the line (zero) and there are many negative numbers with higher values than the positive values.\n\n\nModel predictions and uncertainty\nWe are going to focus on model 2 going forward as it has better performance.\nWe are going to use a bootstrap method to help us sample the data and fit the model to the data. We start by reseting the seed to 1234 and create 100 bootstraps using the training data. We will then fit the model to these bootstrap samples and make predictions from the model for the original training data.\n\n#Reset random seed for reproducibility - 1234\nset.seed(1234)\n\n#Create 100 bootstrap samples from training data\nboot_samples &lt;- bootstraps(train_data, times = 100)  #Creates 100 bootstrap datasets from training data\n\n#Define a function to fit Model 2 and make predictions and to extract the training data from the bootstrap sample\nfit_and_predict &lt;- function(split) {boot_train &lt;- analysis(split)  #Extract training set from bootstrap sample\n  lm_boot &lt;- linear_reg() %&gt;%   #Fit the Full Model to the bootstrap training set\n    set_engine(\"lm\") %&gt;%\n    set_mode(\"regression\") %&gt;%\n    fit(Y ~ ., data = boot_train)\n  predict(lm_boot, new_data = train_data) %&gt;% #Predict on original training data\n    pull(.pred)}  #Extract predicted values as a numeric vector\n\n\nboot_preds &lt;- map(boot_samples$splits, fit_and_predict)  #Apply model to each bootstrap sample & store predictions\n\n#Convert list of predictions to data frame\nboot_pred_df &lt;- as.data.frame(do.call(cbind, boot_preds))\ncolnames(boot_pred_df) &lt;- paste0(\"boot_\", seq(1, length(boot_preds)))  #Label columns\n\n#Add original observed values for reference\nboot_pred_df &lt;- bind_cols(train_data %&gt;% select(Y), boot_pred_df)\n\n#Print a preview of the bootstrap predictions\nprint(\"First few rows of bootstrap predictions:\")\n\n[1] \"First few rows of bootstrap predictions:\"\n\nprint(head(boot_pred_df))\n\n# A tibble: 6 × 101\n      Y boot_1 boot_2 boot_3 boot_4 boot_5 boot_6 boot_7 boot_8 boot_9 boot_10\n  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n1 3004.  3118.  3377.  3396.  3560.  3203.  3551.  3241.  3227.  3136.   3179.\n2 1347.  1894.  1797.  1824.  1790.  2035.  2014.  1942.  2436.  1976.   2080.\n3 2772.  2629.  2689.  2812.  2983.  2634.  3003.  2655.  2786.  2588.   2738.\n4 2028.  2165.  1673.  2466.  2061.  1706.  2249.  1913.  2173.  1873.   2429.\n5 2353.  2710.  3000.  2927.  3128.  2933.  3049.  2942.  2893.  2861.   2685.\n6  826.  1370.  1126.  1422.  1376.  1252.  1444.  1177.  1149.  1458.   1100.\n# ℹ 90 more variables: boot_11 &lt;dbl&gt;, boot_12 &lt;dbl&gt;, boot_13 &lt;dbl&gt;,\n#   boot_14 &lt;dbl&gt;, boot_15 &lt;dbl&gt;, boot_16 &lt;dbl&gt;, boot_17 &lt;dbl&gt;, boot_18 &lt;dbl&gt;,\n#   boot_19 &lt;dbl&gt;, boot_20 &lt;dbl&gt;, boot_21 &lt;dbl&gt;, boot_22 &lt;dbl&gt;, boot_23 &lt;dbl&gt;,\n#   boot_24 &lt;dbl&gt;, boot_25 &lt;dbl&gt;, boot_26 &lt;dbl&gt;, boot_27 &lt;dbl&gt;, boot_28 &lt;dbl&gt;,\n#   boot_29 &lt;dbl&gt;, boot_30 &lt;dbl&gt;, boot_31 &lt;dbl&gt;, boot_32 &lt;dbl&gt;, boot_33 &lt;dbl&gt;,\n#   boot_34 &lt;dbl&gt;, boot_35 &lt;dbl&gt;, boot_36 &lt;dbl&gt;, boot_37 &lt;dbl&gt;, boot_38 &lt;dbl&gt;,\n#   boot_39 &lt;dbl&gt;, boot_40 &lt;dbl&gt;, boot_41 &lt;dbl&gt;, boot_42 &lt;dbl&gt;, …\n\n\nAbove we see a preview of the bootstrap predictions that we modeled.\nWe will now calculate the mean, median and confidence intervals for the bootstrap predictions and generate a dataframe with this and provide a summary/overview of this dataframe of these values combined with Y (observed vaues).\n\n#Convert list of predictions to a matrix (for easier calculations)\npred_matrix &lt;- do.call(cbind, boot_preds)  #convert list to a matrix\ncolnames(pred_matrix) &lt;- paste0(\"boot_\", seq(1, ncol(pred_matrix)))  #label columns\n\n#Compute Mean, Median & 89% Confidence Intervals\npreds &lt;- pred_matrix %&gt;% apply(1, function(x) {c(Mean_Prediction = mean(x), quantile(x, c(0.055, 0.5, 0.945)))}) %&gt;%\n  t()  #Transpose to align columns correctly\n\n#Convert to dataframe and add `Y` \npred_summary &lt;- as.data.frame(preds) %&gt;% rename(Mean_Prediction = `Mean_Prediction`,\n    CI_Lower_89 = `5.5%`,\n    Median_Prediction = `50%`,\n    CI_Upper_89 = `94.5%`) %&gt;%\n  mutate(Y = train_data$Y)  \n\n#We will verify this step because differences in size will cause failure in the following steps\n#Verify data structure to ensure correct fix\nprint(paste(\"Size of train_data:\", nrow(train_data)))  #Should be 90\n\n[1] \"Size of train_data: 90\"\n\nprint(paste(\"Size of pred_summary:\", nrow(pred_summary)))  #Should also be 90\n\n[1] \"Size of pred_summary: 90\"\n\nprint(\"First few rows of bootstrap prediction summary with Y:\")\n\n[1] \"First few rows of bootstrap prediction summary with Y:\"\n\nprint(head(pred_summary))\n\n  Mean_Prediction CI_Lower_89 Median_Prediction CI_Upper_89       Y\n1        3327.341    3094.796          3335.818    3546.870 3004.21\n2        1944.126    1692.301          1945.359    2165.591 1346.62\n3        2757.878    2589.782          2764.634    2931.490 2771.69\n4        2073.550    1782.860          2085.856    2384.565 2027.60\n5        2914.454    2665.413          2933.091    3137.513 2353.40\n6        1283.881    1061.393          1298.528    1484.655  826.43\n\nstr(pred_summary)  \n\n'data.frame':   90 obs. of  5 variables:\n $ Mean_Prediction  : num  3327 1944 2758 2074 2914 ...\n $ CI_Lower_89      : num  3095 1692 2590 1783 2665 ...\n $ Median_Prediction: num  3336 1945 2765 2086 2933 ...\n $ CI_Upper_89      : num  3547 2166 2931 2385 3138 ...\n $ Y                : num  3004 1347 2772 2028 2353 ...\n\n\nWe will now geenrate a plot to visualise the data. We want to evaluate the observed values, the point estimates and the calcuated statistics from the bootstrap predictions. We plot the Observed vs Predicted values wirh bootstrap confidence intervals, mean and median statistics.\n\n#Get Original point estimate from the full model (Model 2)\npoint_estimates &lt;- predict(lm_full, new_data = train_data) %&gt;%\n  bind_cols(train_data) %&gt;% rename(Point_Estimate = .pred)  #Rename prediction column\n\n#Use left_join() to ensure correct data alignment matched based on Y\npred_plot_data &lt;- point_estimates %&gt;% left_join(pred_summary, by = \"Y\") %&gt;% select(Y, Point_Estimate, Median_Prediction, CI_Lower_89, CI_Upper_89)  \n\n#Create plot for visualization\nggplot(pred_plot_data) +\n  #black dots for original point estimates\n  geom_point(aes(x = Y, y = Point_Estimate), color = \"black\", size = 2, alpha = 0.8) +\n    # Blue dots for bootstrap median predictions\n  geom_point(aes(x = Y, y = Median_Prediction), color = \"blue\", size = 2, alpha = 0.7) +\n    # Red dots for lower bound of 89% confidence interval\n  geom_point(aes(x = Y, y = CI_Lower_89), color = \"red\", size = 2, alpha = 0.5) +\n    # Green dots for upper bound of 89% confidence interval\n  geom_point(aes(x = Y, y = CI_Upper_89), color = \"green\", size = 2, alpha = 0.5) +\n    # Add a 45-degree line (ideal case where predicted = observed)\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"black\") +\n    # Ensure x and y axes match for comparison\n  scale_x_continuous(limits = c(0, 5000)) +\n  scale_y_continuous(limits = c(0, 5000)) +\n    # Labels and theme\n  labs(title = \"Observed vs. Predicted Values with Bootstrap Confidence Intervals\",\n    x = \"Observed Values\", y = \"Predicted Values\", color = \"Prediction Type\") + theme_minimal() \n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nIt is hard to distinguish all of the different points without a legend and to see some of the colours. So the same plot will be generated using different symbols and providing a legend.\n\n#Get original point estimate from the full model (Model 2)\npoint_estimates &lt;- predict(lm_full, new_data = train_data) %&gt;%\n  bind_cols(train_data) %&gt;% rename(Point_Estimate = .pred)  #Rename prediction column\n\n#Ensure Correct data alignment Using left_join()\npred_plot_data &lt;- point_estimates %&gt;% left_join(pred_summary, by = \"Y\") %&gt;% select(\n    Y,                  #Observed values \n    Point_Estimate,     #Original model predictions\n    Mean_Prediction,    #Mean bootstrap prediction\n    Median_Prediction,  #Median bootstrap prediction\n    CI_Lower_89,        #Lower 89% confidence interval\n    CI_Upper_89)         #Upper 89% confidence interval\n\nggplot(pred_plot_data, aes(x = Y)) +\n  # Black dots for original point estimates (Model 2 predictions)\n  geom_point(aes(y = Point_Estimate, color = \"Point Estimate\", shape = \"Point Estimate\"), size = 2, alpha = 0.8) +\n    # Purple dots for mean bootstrap prediction\n  geom_point(aes(y = Mean_Prediction, color = \"Mean Prediction\", shape = \"Mean Prediction\"), size = 2, alpha = 0.7) +\n  # Blue dots for bootstrap median predictions\n  geom_point(aes(y = Median_Prediction, color = \"Median Prediction\", shape = \"Median Prediction\"), size = 2, alpha = 0.7) +\n  # Red dots for lower bound of 89% confidence interval\n  geom_point(aes(y = CI_Lower_89, color = \"CI Lower Bound\", shape = \"CI Lower Bound\"), size = 2, alpha = 0.5) +\n  # Green dots for upper bound of 89% confidence interval\n  geom_point(aes(y = CI_Upper_89, color = \"CI Upper Bound\", shape = \"CI Upper Bound\"), size = 2, alpha = 0.5) +\n  # Add a 45-degree line (ideal case where predicted = observed)\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"black\") +\n  scale_x_continuous(limits = c(0, 5000)) +\n  scale_y_continuous(limits = c(0, 5000)) +\n  # Manually define colors and shapes with proper legend\n  scale_color_manual(name = \"Prediction Type\", values = c(\n      \"Point Estimate\" = \"black\",\n      \"Mean Prediction\" = \"purple\",\n      \"Median Prediction\" = \"blue\",\n      \"CI Lower Bound\" = \"red\",\n      \"CI Upper Bound\" = \"green\")) +\n  scale_shape_manual(name = \"Prediction Type\", values = c(\n      \"Point Estimate\" = 16,\n      \"Mean Prediction\" = 17,\n      \"Median Prediction\" = 18,\n      \"CI Lower Bound\" = 3,\n      \"CI Upper Bound\" = 3 )) +\n  # Labels and theme\n  labs(title = \"Observed vs. Predicted Values with Bootstrap Confidence Intervals\", x = \"Observed Values (Y)\",\n    y = \"Predicted Values\") + theme_minimal()\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nModel 2 seems to capture the trend of observed vs predicted (the 45% line) quite well although not perfectly. The values from the bootstrap sampling median and mean demonstrate a similar pattern and so that shows the bootstrap sampling did not significantly shift the trend. The confidence intervals also follow this general tredn and are quite close which might indicate that the models predictions are quite stable in many cases (although the gap increases in some areas)."
  },
  {
    "objectID": "fitting-exercise/code/fitting-exercise.html#part-3",
    "href": "fitting-exercise/code/fitting-exercise.html#part-3",
    "title": "fitting-exercise",
    "section": "Part 3",
    "text": "Part 3\n\nFinal evaluation using test data\n\n# use model 2 to predict for test data\npred_test &lt;- predict(\n  fit6,\n  new_data=test_data\n)\n\n# combine real data with predictions\ntest_result &lt;- test_data %&gt;%\n  select(Y, dose, age, sex, wt, ht) %&gt;%\n  bind_cols(pred_test)\n\n\n# plot predicted vs observed for both training data and test data\nggplot() +\n  geom_point(data=fit6_result, aes(x=Y, y=.pred, color=\"Train Data\")) +\n  geom_point(data=test_result, aes(x=Y, y=.pred, color=\"Test Data\")) +\n  geom_abline(slope = 1, intercept = 0) +\n  scale_x_continuous(limits=c(0,5700)) +\n  scale_y_continuous(limits=c(0,5700)) +\n  scale_color_manual(values = c(\"Train Data\" = \"black\", \"Test Data\" = \"coral3\"), name=\"Dataset\")\n\n\n\n\n\n\n\n\n\nResults\nBased on the metrics, the multivariable model performs better than the null model. The RMSE of the full model is 627, with an R-squared of 0.562, which is an improvement over the null model’s RMSE of 948. A smaller RMSE indicates that the full model predicts values closer to the actual data than the null model. The R-squared value means that the full model explains 56.2% of the variation in the data beyond what the null model accounts for.\nThe univariable model with dose also performs better than the null model, with an RMSE of 706 and an R-squared value of 0.451. Compared to the null model, the smaller RMSE suggests that the univariable model predicts values closer to the actual data. The R-squared value indicates that the univariable model explains 45.1% of the variation in the data beyond the null model. The univariable model is useful for quantifying and visually representing the effect of dose on the outcome. However, beyond this, its practicality may be limited, as the full model demonstrates that in real data, factors beyond dose influence the outcome.\nComparing the metrics of the multivariable and univariable models shows that the multivariable model has a smaller RMSE and a larger R-squared. This suggests that the full model predicts values more accurately than the univariable model and explains more of the variation in the data beyond the null model. This result aligns with the general expectation that as the number of predictors in a model increases, so does the model’s fit.\nImportantly, using train and test datasets reveals that the full model does not appear to be overfitting the training data. This is a crucial feature to assess when evaluating the practicality of a model. If one aims to determine an appropriate drug dose for an individual based on their characteristics, the full model could be useful in practice."
  },
  {
    "objectID": "cdcdata-exercise/code/cdcdata-exercise.html",
    "href": "cdcdata-exercise/code/cdcdata-exercise.html",
    "title": "Data Analysis Exercise",
    "section": "",
    "text": "Data Description: Data was downloaded from the CDC on 2025-02-03. This dataset is titled NHANES Select Chronic Conditions Prevalence Estimates. It contains national data on obesity, high total cholesterol, and hypertension rates from 1999 to 2018 by sex, race, and age.There are a total of 950 rows and 12 columns. See here for more details.\n\nSetup\n\n# load packages\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\n\n# loads data\ndat &lt;- read.csv(here::here(\"cdcdata-exercise/data/raw/rawdata.csv\"))\n\n\n\nData processing\n\n# view data summary\nsummary(dat)\n\n Survey.Years           Sex             Age.Group        \n Length:950         Length:950         Length:950        \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                                                         \n Race.and.Hispanic.Origin   Measure             Percent     Standard.Error \n Length:950               Length:950         Min.   : 3.0   Min.   :0.500  \n Class :character         Class :character   1st Qu.:15.3   1st Qu.:1.500  \n Mode  :character         Mode  :character   Median :25.4   Median :2.000  \n                                             Mean   :30.0   Mean   :2.212  \n                                             3rd Qu.:41.1   3rd Qu.:2.800  \n                                             Max.   :87.5   Max.   :7.500  \n                                             NA's   :40     NA's   :40     \n Lower.95..CI.Limit Upper.95..CI.Limit Presentation.Standard    Note1          \n Min.   : 1.40      Min.   : 5.50      Length:950            Length:950        \n 1st Qu.:11.93      1st Qu.:19.12      Class :character      Class :character  \n Median :20.40      Median :31.00      Mode  :character      Mode  :character  \n Mean   :25.55      Mean   :34.82                                              \n 3rd Qu.:35.10      3rd Qu.:46.50                                              \n Max.   :83.60      Max.   :91.20                                              \n NA's   :40         NA's   :40                                                 \n    Notea          \n Length:950        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\n# select a subset of variables\ndat1 &lt;- dat %&gt;%\n  select(\n    years = Survey.Years,\n    sex = Sex,\n    age = Age.Group,\n    measure = Measure,\n    percent = Percent\n  ) \n\n\n# filter for more granular data - separate by sex, age categories\ndat2 &lt;- dat1 %&gt;%\n  filter(\n    sex != \"All\",\n    age != \"20 and over\",\n    age != \"2-19\"\n  ) %&gt;%\n  mutate(\n    age_factor = factor(age, levels = c(\n      \"2-5\",\"6-11\",\"12-19\",\"20-29\",\"30-39\",\"40-49\",\n      \"50-59\",\"60-69\",\"70 and over\")\n    ),\n    age = as.numeric(age_factor),\n    sex = factor(sex, levels = c(\"Female\", \"Male\")),\n    years_factor = factor(years, levels = c(\n      \"1999-2000\",\"2001-2002\",\"2003-2004\",\n      \"2005-2006\",\"2007-2008\",\"2009-2010\",\n      \"2011-2012\",\"2013-2014\",\"2015-2016\",\"2017-2018\"\n    )),\n    years = as.numeric(years_factor)\n  )\n\n# turn obesity, cholesterol, and hypertension into their own variables\ndat3 &lt;- dat2 %&gt;%\n  group_by(years, sex, age) %&gt;%\n  tidyr::pivot_wider(\n    names_from = measure,\n    values_from = percent\n  )\n\n\n\nExploratory data analysis\n\n# number of rows\nnrow(dat3)\n\n[1] 180\n\n# number of columns\nncol(dat3)\n\n[1] 8\n\nsummary(dat3)\n\n     years          sex          age      age_factor    years_factor\n Min.   : 1.0   Female:90   Min.   :1   2-5    :20   1999-2000:18   \n 1st Qu.: 3.0   Male  :90   1st Qu.:3   6-11   :20   2001-2002:18   \n Median : 5.5               Median :5   12-19  :20   2003-2004:18   \n Mean   : 5.5               Mean   :5   20-29  :20   2005-2006:18   \n 3rd Qu.: 8.0               3rd Qu.:7   30-39  :20   2007-2008:18   \n Max.   :10.0               Max.   :9   40-49  :20   2009-2010:18   \n                                        (Other):60   (Other)  :72   \n    Obesity      High Total Cholesterol  Hypertension  \n Min.   : 7.20   Min.   : 3.00          Min.   : 4.30  \n 1st Qu.:19.27   1st Qu.: 8.50          1st Qu.:30.65  \n Median :30.55   Median :13.65          Median :53.55  \n Mean   :28.82   Mean   :14.35          Mean   :49.98  \n 3rd Qu.:38.20   3rd Qu.:18.55          3rd Qu.:70.90  \n Max.   :49.20   Max.   :31.20          Max.   :87.50  \n                 NA's   :60             NA's   :60     \n\n# print first few obs\nhead(dat3)\n\n# A tibble: 6 × 8\n# Groups:   years, sex, age [6]\n  years sex     age age_factor  years_factor Obesity `High Total Cholesterol`\n  &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt;       &lt;fct&gt;          &lt;dbl&gt;                    &lt;dbl&gt;\n1     1 Male      4 20-29       1999-2000       21.1                      9.7\n2     1 Male      5 30-39       1999-2000       26                       12.6\n3     1 Male      6 40-49       1999-2000       26.3                     28.5\n4     1 Male      7 50-59       1999-2000       32.2                     19.8\n5     1 Male      8 60-69       1999-2000       38                       16.4\n6     1 Male      9 70 and over 1999-2000       23.8                     13.4\n# ℹ 1 more variable: Hypertension &lt;dbl&gt;\n\n# print last few obs\ntail(dat3)\n\n# A tibble: 6 × 8\n# Groups:   years, sex, age [6]\n  years sex      age age_factor years_factor Obesity `High Total Cholesterol`\n  &lt;dbl&gt; &lt;fct&gt;  &lt;dbl&gt; &lt;fct&gt;      &lt;fct&gt;          &lt;dbl&gt;                    &lt;dbl&gt;\n1    10 Male       1 2-5        2017-2018       14.7                       NA\n2    10 Male       2 6-11       2017-2018       21.3                       NA\n3    10 Male       3 12-19      2017-2018       22.5                       NA\n4    10 Female     1 2-5        2017-2018       12.2                       NA\n5    10 Female     2 6-11       2017-2018       19.2                       NA\n6    10 Female     3 12-19      2017-2018       19.9                       NA\n# ℹ 1 more variable: Hypertension &lt;dbl&gt;\n\n\nIt looks like there is some missing data. Locate those missing observations.\n\n# count NAs by column\ncolSums(is.na(dat3))\n\n                 years                    sex                    age \n                     0                      0                      0 \n            age_factor           years_factor                Obesity \n                     0                      0                      0 \nHigh Total Cholesterol           Hypertension \n                    60                     60 \n\n# filter data for only rows with NA values\ndat_na &lt;- dat3 %&gt;% filter(if_any(everything(), is.na))\n\nHigh Total Cholesterol and Hypertension data was not collected for those aged less than 19 years. Remove these observations to focus on the relationship between the three measures.\n\n\nBriefly, data processing\n\ndat4 &lt;- dat3 %&gt;% \n  dplyr::rename(\n    obesity = Obesity,\n    hypertension = Hypertension,\n    cholesterol = `High Total Cholesterol`\n  ) %&gt;%\n  na.omit()\n\nsummary(dat4)\n\n     years          sex          age            age_factor    years_factor\n Min.   : 1.0   Female:60   Min.   :4.0   20-29      :20   1999-2000:12   \n 1st Qu.: 3.0   Male  :60   1st Qu.:5.0   30-39      :20   2001-2002:12   \n Median : 5.5               Median :6.5   40-49      :20   2003-2004:12   \n Mean   : 5.5               Mean   :6.5   50-59      :20   2005-2006:12   \n 3rd Qu.: 8.0               3rd Qu.:8.0   60-69      :20   2007-2008:12   \n Max.   :10.0               Max.   :9.0   70 and over:20   2009-2010:12   \n                                          (Other)    : 0   (Other)  :48   \n    obesity       cholesterol     hypertension  \n Min.   :19.90   Min.   : 3.00   Min.   : 4.30  \n 1st Qu.:30.57   1st Qu.: 8.50   1st Qu.:30.65  \n Median :35.75   Median :13.65   Median :53.55  \n Mean   :35.31   Mean   :14.35   Mean   :49.98  \n 3rd Qu.:40.90   3rd Qu.:18.55   3rd Qu.:70.90  \n Max.   :49.20   Max.   :31.20   Max.   :87.50  \n                                                \n\n\n\n\nMore EDA\nExplore each variable’s categories and/or distributions.\n\n# categorical variables\ntable(dat4$years, dat4$sex)\n\n    \n     Female Male\n  1       6    6\n  2       6    6\n  3       6    6\n  4       6    6\n  5       6    6\n  6       6    6\n  7       6    6\n  8       6    6\n  9       6    6\n  10      6    6\n\ntable(dat4$years, dat4$age)\n\n    \n     4 5 6 7 8 9\n  1  2 2 2 2 2 2\n  2  2 2 2 2 2 2\n  3  2 2 2 2 2 2\n  4  2 2 2 2 2 2\n  5  2 2 2 2 2 2\n  6  2 2 2 2 2 2\n  7  2 2 2 2 2 2\n  8  2 2 2 2 2 2\n  9  2 2 2 2 2 2\n  10 2 2 2 2 2 2\n\ntable(dat4$sex, dat4$age)\n\n        \n          4  5  6  7  8  9\n  Female 10 10 10 10 10 10\n  Male   10 10 10 10 10 10\n\n# numeric variables\nsummary(dat4$obesity)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  19.90   30.57   35.75   35.31   40.90   49.20 \n\nggplot(dat4, aes(x = obesity)) +\n  geom_histogram(binwidth = 5, fill = \"skyblue\", color = \"black\") \n\n\n\n\n\n\n\nsummary(dat4$cholesterol)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3.00    8.50   13.65   14.35   18.55   31.20 \n\nggplot(dat4, aes(x = cholesterol)) +\n  geom_histogram(binwidth = 5, fill = \"skyblue\", color = \"black\") \n\n\n\n\n\n\n\nsummary(dat4$hypertension)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   4.30   30.65   53.55   49.98   70.90   87.50 \n\nggplot(dat4, aes(x = hypertension)) +\n  geom_histogram(binwidth = 5, fill = \"skyblue\", color = \"black\") \n\n\n\n\n\n\n\n\nLets look at the relationship between years and our three measurements.\n\n# obesity\nplot(dat4$years, dat4$obesity)\n\n\n\n\n\n\n\nsummary(lm(obesity ~ years, data=dat4))\n\n\nCall:\nlm(formula = obesity ~ years, data = dat4)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-13.4343  -3.9117   0.9207   4.0506  12.6361 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  28.6539     1.1405  25.124  &lt; 2e-16 ***\nyears         1.2101     0.1838   6.583 1.33e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.783 on 118 degrees of freedom\nMultiple R-squared:  0.2686,    Adjusted R-squared:  0.2624 \nF-statistic: 43.34 on 1 and 118 DF,  p-value: 1.335e-09\n\n# hypertension\nplot(dat4$years, dat4$hypertension)\n\n\n\n\n\n\n\nsummary(lm(hypertension ~ years, data=dat4))\n\n\nCall:\nlm(formula = hypertension ~ years, data = dat4)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-46.165 -19.006   3.323  21.174  37.282 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  51.7594     4.7876  10.811   &lt;2e-16 ***\nyears        -0.3235     0.7716  -0.419    0.676    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 24.28 on 118 degrees of freedom\nMultiple R-squared:  0.001488,  Adjusted R-squared:  -0.006974 \nF-statistic: 0.1758 on 1 and 118 DF,  p-value: 0.6758\n\n# cholesterol\nplot(dat4$years, dat4$cholesterol)\n\n\n\n\n\n\n\nsummary(lm(cholesterol ~ years, data=dat4))\n\n\nCall:\nlm(formula = cholesterol ~ years, data = dat4)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-11.0397  -5.6989  -0.5215   4.6737  14.4188 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  19.3494     1.3118  14.750  &lt; 2e-16 ***\nyears        -0.9097     0.2114  -4.303 3.49e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.652 on 118 degrees of freedom\nMultiple R-squared:  0.1356,    Adjusted R-squared:  0.1283 \nF-statistic: 18.52 on 1 and 118 DF,  p-value: 3.494e-05\n\n\nFor every one unit increase in year, there is a \\(1.2\\) unit increase in obesity. For every one unit increase in year, there is a \\(0.9\\) unit decrease in cholesterol.\nLets look at the relationship between sex and our three measurements.\n\n# obesity\nplot(dat4$sex, dat4$obesity)\n\n\n\n\n\n\n\nsummary(lm(obesity ~ sex, data=dat4))\n\n\nCall:\nlm(formula = obesity ~ sex, data = dat4)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-13.8950  -4.7733   0.7408   4.9837  12.9050 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  36.8233     0.8505  43.297   &lt;2e-16 ***\nsexMale      -3.0283     1.2028  -2.518   0.0131 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.588 on 118 degrees of freedom\nMultiple R-squared:  0.05098,   Adjusted R-squared:  0.04294 \nF-statistic: 6.339 on 1 and 118 DF,  p-value: 0.01315\n\n# hypertension\nplot(dat4$sex, dat4$hypertension)\n\n\n\n\n\n\n\nsummary(lm(hypertension ~ sex, data=dat4))\n\n\nCall:\nlm(formula = hypertension ~ sex, data = dat4)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-42.232 -22.778   1.872  21.822  40.968 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   46.532      3.104  14.990   &lt;2e-16 ***\nsexMale        6.897      4.390   1.571    0.119    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 24.05 on 118 degrees of freedom\nMultiple R-squared:  0.02049,   Adjusted R-squared:  0.01219 \nF-statistic: 2.468 on 1 and 118 DF,  p-value: 0.1189\n\n# cholesterol\nplot(dat4$sex, dat4$cholesterol)\n\n\n\n\n\n\n\nsummary(lm(cholesterol ~ sex, data=dat4))\n\n\nCall:\nlm(formula = cholesterol ~ sex, data = dat4)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-11.8717  -5.6700  -0.2458   4.8050  15.8800 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   16.072      0.896  17.938  &lt; 2e-16 ***\nsexMale       -3.452      1.267  -2.724  0.00743 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.94 on 118 degrees of freedom\nMultiple R-squared:  0.05917,   Adjusted R-squared:  0.05119 \nF-statistic: 7.421 on 1 and 118 DF,  p-value: 0.007428\n\n\nMale sex has \\(3.03\\) unit decrease in obesity from female sex. Male sex has \\(3.45\\) unit decrease in cholesterol from female sex.\nLets look at the relationship between age and our three measurements.\n\n# obesity\nplot(dat4$age, dat4$obesity)\n\n\n\n\n\n\n\ndat_age1 &lt;- dat4 %&gt;%\n  filter(\n    age != 9\n  )\nsummary(lm(obesity ~ age, data=dat_age1))\n\n\nCall:\nlm(formula = obesity ~ age, data = dat_age1)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-10.0050  -3.7519  -0.4487   3.2637  11.7575 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  17.3550     2.1604   8.033 2.15e-12 ***\nage           3.1375     0.3505   8.953 2.27e-14 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.956 on 98 degrees of freedom\nMultiple R-squared:  0.4499,    Adjusted R-squared:  0.4443 \nF-statistic: 80.15 on 1 and 98 DF,  p-value: 2.266e-14\n\ndat_age2 &lt;- dat4 %&gt;%\n  filter(\n    age %in% c(4, 9)\n  )\nsummary(lm(obesity ~ age, data=dat_age2))\n\n\nCall:\nlm(formula = obesity ~ age, data = dat_age2)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-10.5550  -3.3300  -0.3575   3.4700  10.7450 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  25.0240     2.2475  11.134 1.59e-13 ***\nage           0.6590     0.3227   2.042   0.0481 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.103 on 38 degrees of freedom\nMultiple R-squared:  0.09888,   Adjusted R-squared:  0.07517 \nF-statistic:  4.17 on 1 and 38 DF,  p-value: 0.04813\n\n# hypertension\nplot(dat4$age, dat4$hypertension)\n\n\n\n\n\n\n\nsummary(lm(hypertension ~ age, data=dat4))\n\n\nCall:\nlm(formula = hypertension ~ age, data = dat4)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-17.646  -5.528   0.542   5.195  17.154 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -38.1340     2.4154  -15.79   &lt;2e-16 ***\nage          13.5560     0.3594   37.72   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.724 on 118 degrees of freedom\nMultiple R-squared:  0.9234,    Adjusted R-squared:  0.9228 \nF-statistic:  1423 on 1 and 118 DF,  p-value: &lt; 2.2e-16\n\n# cholesterol\nplot(dat4$age, dat4$cholesterol)\n\n\n\n\n\n\n\nsummary(lm(cholesterol ~ age, data=dat4))\n\n\nCall:\nlm(formula = cholesterol ~ age, data = dat4)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-14.8440  -4.4405  -0.5565   4.4042  14.9738 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   3.6905     2.3618   1.563    0.121    \nage           1.6393     0.3514   4.665 8.21e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.574 on 118 degrees of freedom\nMultiple R-squared:  0.1557,    Adjusted R-squared:  0.1485 \nF-statistic: 21.76 on 1 and 118 DF,  p-value: 8.215e-06\n\n\nExcluding the final age category, for every subsequent age group, there is a \\(3.14\\) unit increase in obesity. There is no difference in obesity between groups 4 and 9. For every subsequent age group, there is a \\(13.56\\) unit increase in hypertension. For every subsequent age group, there is a \\(1.64\\) unit increase in cholesterol.\n\n\nEDA Conclusions\nThere are 10 2-year years categories from 1999-2018. For each years category, there is an observation for each sex (Female, Male), and within each sex, an observation for each of 6 age groups (20-29,30-39,40-49,50-59,60-69,70 and over). This makes \\(6*2=12\\) observations each year and \\(10*12=120\\) total observations in the data. Each observation has a value for percentage of population with obesity, high cholesterol, and hypertension.\nObesity overall has mean 35.31 with (30.57, 40.90) quartiles. For every one unit increase in year group, there is a \\(1.2\\) unit increase in obesity. Male sex has \\(3.03\\) unit decrease in obesity from female sex. Excluding the final age category, for every subsequent age group, there is a \\(3.14\\) unit increase in obesity. There is no difference in obesity between age categories “20-29” and “70 and over”.\nHypertension overall has mean 49.98 with (30.65, 70.90) quartiles. There is no obvious relationship between hypertension and year or sex. For every subsequent age group, there is a \\(13.56\\) unit increase in hypertension.\nCholesterol overall has mean 14.35 with (8.5, 18.55) quartiles. For every one unit increase in year, there is a \\(0.9\\) unit decrease in cholesterol. Male sex has \\(3.45\\) unit decrease in cholesterol from female sex. For every subsequent age group, there is a \\(1.64\\) unit increase in cholesterol.\n\n\nEND OF PART 1\n\n\nThis section contributed by Asmith Joseph\n\n\nRunning the Data\nTo read the data, I set my working directory to match the project structure using setwd(“C:/Users/ajose35/Desktop/Ecole/MADA-course/murphyjohn-MADA-portfolio/coding-exercise”). Since the dataset was located in a different folder than expected, I used here::i_am(“cdcdata-exercise/data/raw/rawdata.csv”) to manually define the project root without modifying my collaborator’s code. After ensuring that here correctly resolved the file path by running file.exists(here::here(“cdcdata-exercise/data/raw/rawdata.csv”)), I successfully loaded the dataset using dat &lt;- read.csv(here::here(“cdcdata-exercise/data/raw/rawdata.csv”)). This approach allowed me to work with the existing project structure while maintaining compatibility with my collaborator’s code.\n\n\nGenerate Synthetic Data with the Same Structure\nBased on the summary the dataset contains:\nCategorical variables: Survey.Years, Sex, Age.Group, Measure Numeric variables: Percent, Standard.Error, Lower.95..CI.Limit, Upper.95..CI.Limit. The create the Synthetic data I used this prompt “Generate R code to create synthetic data with 950 observations, including categorical and numeric variables that resemble the original dataset structure.”\n\n# Loading necessary libraries\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(fabricatr)  # For realistic synthetic data\n\nWarning: package 'fabricatr' was built under R version 4.4.2\n\n# Set seed for reproducibility\nset.seed(123)\n\n# Creating synthetic dataset\nsynthetic_data &lt;- tibble(\n  Survey.Years = sample(c(\"1999-2000\", \"2001-2002\", \"2003-2004\",\n                          \"2005-2006\", \"2007-2008\", \"2009-2010\",\n                          \"2011-2012\", \"2013-2014\", \"2015-2016\", \"2017-2018\"), \n                        950, replace = TRUE),\n  Sex = sample(c(\"Male\", \"Female\"), 950, replace = TRUE),\n  Age.Group = sample(c(\"2-5\", \"6-11\", \"12-19\", \"20-29\", \"30-39\", \"40-49\",\n                       \"50-59\", \"60-69\", \"70 and over\"), 950, replace = TRUE),\n  Measure = sample(c(\"Obesity\", \"High Total Cholesterol\", \"Hypertension\"), 950, replace = TRUE),\n  Percent = round(runif(950, min = 3, max = 90), 1),  # Simulated percentages\n  Standard.Error = round(runif(950, min = 0.5, max = 7.5), 2),\n  Lower.95..CI.Limit = Percent - runif(950, min = 1.5, max = 8.0),\n  Upper.95..CI.Limit = Percent + runif(950, min = 1.5, max = 8.0)\n)\n\n# Saving synthetic data\n#write.csv(synthetic_data, \"synthetic_data.csv\", row.names = FALSE)\n\n# View first few rows\nhead(synthetic_data)\n\n# A tibble: 6 × 8\n  Survey.Years Sex   Age.Group Measure Percent Standard.Error Lower.95..CI.Limit\n  &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;          &lt;dbl&gt;              &lt;dbl&gt;\n1 2003-2004    Male  70 and o… High T…    61.2           4.86              53.9 \n2 2003-2004    Male  6-11      Obesity    11.7           3.24               6.61\n3 2017-2018    Fema… 40-49     High T…    21             6.55              15.7 \n4 2001-2002    Male  12-19     Obesity    85.4           4.35              82.4 \n5 2009-2010    Fema… 12-19     High T…    52.4           6.47              47.4 \n6 2007-2008    Fema… 60-69     Obesity    38.5           4.11              31.3 \n# ℹ 1 more variable: Upper.95..CI.Limit &lt;dbl&gt;\n\n\n\n\nCleaning and Processing the Synthetic Data\nIn the cleaning process I performed data selection, filtering, and transformation.\n\n# Cleaning  and Processing the Synthetic Data\n\n# Selecting relevant variables\nsynthetic_dat1 &lt;- synthetic_data %&gt;%\n  select(\n    years = Survey.Years,\n    sex = Sex,\n    age = Age.Group,\n    measure = Measure,\n    percent = Percent\n  )\n\n# Filtering granular data - exclude \"All\" and broad age categories\nsynthetic_dat2 &lt;- synthetic_dat1 %&gt;%\n  filter(\n    sex != \"All\",\n    age != \"20 and over\",\n    age != \"2-19\"\n  ) %&gt;%\n  mutate(\n    age_factor = factor(age, levels = c(\n      \"2-5\", \"6-11\", \"12-19\", \"20-29\", \"30-39\", \"40-49\",\n      \"50-59\", \"60-69\", \"70 and over\")\n    ),\n    age = as.numeric(age_factor),\n    sex = factor(sex, levels = c(\"Female\", \"Male\")),\n    years_factor = factor(years, levels = c(\n      \"1999-2000\", \"2001-2002\", \"2003-2004\",\n      \"2005-2006\", \"2007-2008\", \"2009-2010\",\n      \"2011-2012\", \"2013-2014\", \"2015-2016\", \"2017-2018\"\n    )),\n    years = as.numeric(years_factor)\n  )\n\n# CHECK FOR DUPLICATES BEFORE PIVOTING\nsynthetic_dat2 %&gt;%\n  group_by(years, sex, age, measure) %&gt;%\n  summarise(n = n(), .groups = \"drop\") %&gt;%\n  filter(n &gt; 1)\n\n# A tibble: 288 × 5\n   years sex      age measure                    n\n   &lt;dbl&gt; &lt;fct&gt;  &lt;dbl&gt; &lt;chr&gt;                  &lt;int&gt;\n 1     1 Female     1 Hypertension               2\n 2     1 Female     1 Obesity                    2\n 3     1 Female     2 Hypertension               2\n 4     1 Female     3 High Total Cholesterol     3\n 5     1 Female     3 Hypertension               3\n 6     1 Female     4 High Total Cholesterol     3\n 7     1 Female     4 Hypertension               3\n 8     1 Female     4 Obesity                    4\n 9     1 Female     5 Obesity                    2\n10     1 Female     6 High Total Cholesterol     2\n# ℹ 278 more rows\n\n# Summarizing percent values to ensure uniqueness before pivoting\nsynthetic_dat3 &lt;- synthetic_dat2 %&gt;%\n  group_by(years, sex, age, measure) %&gt;%\n  summarise(percent = mean(percent, na.rm = TRUE), .groups = \"drop\") %&gt;%  # Take mean to resolve duplicates\n  tidyr::pivot_wider(\n    names_from = measure,\n    values_from = percent\n  )\n\n# Rename columns to match cleaned dataset\nsynthetic_dat4 &lt;- synthetic_dat3 %&gt;%\n  rename(\n    obesity = Obesity,\n    hypertension = Hypertension,\n    cholesterol = `High Total Cholesterol`\n  ) %&gt;%\n  na.omit()\n\n\n\nSummarizing and Exploring the Synthetic Data\n\nsummary(synthetic_dat4)\n\n     years            sex          age        hypertension      obesity     \n Min.   : 1.000   Female:50   Min.   :1.00   Min.   :11.10   Min.   : 4.55  \n 1st Qu.: 3.000   Male  :52   1st Qu.:3.00   1st Qu.:36.63   1st Qu.:34.67  \n Median : 6.000               Median :5.00   Median :44.32   Median :45.27  \n Mean   : 5.804               Mean   :5.02   Mean   :48.25   Mean   :46.36  \n 3rd Qu.: 8.000               3rd Qu.:7.00   3rd Qu.:60.42   3rd Qu.:57.30  \n Max.   :10.000               Max.   :9.00   Max.   :89.60   Max.   :86.00  \n  cholesterol   \n Min.   : 5.40  \n 1st Qu.:37.02  \n Median :46.22  \n Mean   :45.90  \n 3rd Qu.:56.83  \n Max.   :85.70  \n\ncolSums(is.na(synthetic_dat4))\n\n       years          sex          age hypertension      obesity  cholesterol \n           0            0            0            0            0            0 \n\n\n\nsum(is.na(synthetic_dat4$obesity))  # Check number of NA values in obesity\n\n[1] 0\n\n\n\n\nVisualizion\n\n#Histogram of Obesity Rates\n\n\nggplot(synthetic_dat4 %&gt;% filter(!is.na(obesity)), aes(x = obesity)) +\n  geom_histogram(binwidth = 5, fill = \"blue\", alpha = 0.6, color = \"black\") +\n  theme_minimal() +\n  labs(title = \"Obesity Rate Distribution \", x = \"Obesity Rate\", y = \"Count\")\n\n\n\n\n\n\n\n\n\n#Boxplot of Cholesterol by Sex\n\nggplot(synthetic_dat4, aes(x = sex, y = cholesterol, fill = sex)) +\n  geom_boxplot() +\n  theme_minimal() +\n  labs(title = \"Cholesterol Levels by Sex\", x = \"Sex\", y = \"Cholesterol Level\")\n\n\n\n\n\n\n\n\n\n# Line Plot of Hypertension Over Years\nggplot(synthetic_dat4, aes(x = years, y = hypertension, color = sex)) +\n  geom_point(alpha = 0.5) +  # Add scatter points for better visibility\n  geom_smooth(method = \"loess\", se = FALSE, size = 1) +  # Add smoothed trend line\n  theme_minimal() +\n  labs(title = \"Hypertension Levels Over Years\", \n       x = \"Year\", y = \"Hypertension Rate\") +\n  scale_x_continuous(breaks = unique(synthetic_dat4$years))  # Ensure year labels are readable\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n# Bar Chart Hypertension Levels by Year\nggplot(synthetic_dat4, aes(x = as.factor(years), y = hypertension, fill = sex)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +  \n  theme_minimal() +\n  labs(title = \"Hypertension Levels by Year\", \n       x = \"Year\", y = \"Hypertension Rate\") +\n  scale_fill_manual(values = c(\"blue\", \"pink\"))  # Custom colors for Male/Female\n\n\n\n\n\n\n\n\n\n\nRegression Models\nRunning Regression Models on the Synthetic Data Because these models will help analyze trends, test hypotheses, and validate data structure. Addiionally, they will assess associations between health indicators and predictors, checking for statistical significance and identifying gaps where more variables may improve predictions.\n\n# Looking at Obesity Trends Over Years\nsummary(lm(obesity ~ years, data = synthetic_dat4))\n\n\nCall:\nlm(formula = obesity ~ years, data = synthetic_dat4)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-41.222 -11.902  -1.321  10.831  39.904 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  49.1880     4.1186  11.943   &lt;2e-16 ***\nyears        -0.4880     0.6397  -0.763    0.447    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 18 on 100 degrees of freedom\nMultiple R-squared:  0.005787,  Adjusted R-squared:  -0.004155 \nF-statistic: 0.582 on 1 and 100 DF,  p-value: 0.4473\n\n# Looking at Hypertension by Sex\nsummary(lm(hypertension ~ sex, data = synthetic_dat4))\n\n\nCall:\nlm(formula = hypertension ~ sex, data = synthetic_dat4)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-37.988 -11.714  -3.843  11.577  42.223 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   47.377      2.712  17.471   &lt;2e-16 ***\nsexMale        1.711      3.798   0.451    0.653    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 19.18 on 100 degrees of freedom\nMultiple R-squared:  0.002026,  Adjusted R-squared:  -0.007953 \nF-statistic: 0.203 on 1 and 100 DF,  p-value: 0.6533\n\n# Looking at Cholesterol by Age\nsummary(lm(cholesterol ~ age, data = synthetic_dat4))\n\n\nCall:\nlm(formula = cholesterol ~ age, data = synthetic_dat4)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-40.657  -8.580   0.493  10.665  40.136 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  45.0709     3.8711  11.643   &lt;2e-16 ***\nage           0.1644     0.6871   0.239    0.811    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 17.76 on 100 degrees of freedom\nMultiple R-squared:  0.0005724, Adjusted R-squared:  -0.009422 \nF-statistic: 0.05727 on 1 and 100 DF,  p-value: 0.8114\n\n\n\n\nInterpretation of Regression Outputs\nModel Predictor Effect Significance (p-value) Interpretation Obesity ~ Years Years -0.488 (↓) 0.447 No significant trend in obesity over time Hypertension ~ Sex Male vs. Female +1.711 (↑) 0.653 No significant difference in hypertension between sexes Cholesterol ~ Age Age +0.164 (↑) 0.811 No significant impact of age on cholesterol\nThe regression analysis shows no significant relationships between obesity, hypertension, or cholesterol and their predictors. Obesity trends over time show a slight decline (-0.488 per year), but this effect is not significant (p = 0.447). Hypertension rates are slightly higher in males (+1.711), but the difference is insignificant (p = 0.653). Cholesterol levels increase slightly with age (+0.164), but age has no meaningful impact (p = 0.811).\nAll models have low R-squared values, indicating weak predictive power. The dataset likely lacks key variables or requires better transformations to capture meaningful patterns.\n\n\nComparing the Synthetic and Original Data\nThis comparison will allow me to check similarity, compare means and standard deviations.\n\n#  Comparing the Synthetic and Original Data\n\ncomparison_table &lt;- tibble(\n  Variable = c(\"Obesity\", \"Cholesterol\", \"Hypertension\"),\n  Original_Mean = c(35.31, 14.35, 49.98),  # Replace with real means\n  Synthetic_Mean = c(mean(synthetic_dat4$obesity), mean(synthetic_dat4$cholesterol), mean(synthetic_dat4$hypertension)),\n  Original_SD = c(6.58, 6.94, 24.05),\n  Synthetic_SD = c(sd(synthetic_dat4$obesity), sd(synthetic_dat4$cholesterol), sd(synthetic_dat4$hypertension))\n)\n\nprint(comparison_table)\n\n# A tibble: 3 × 5\n  Variable     Original_Mean Synthetic_Mean Original_SD Synthetic_SD\n  &lt;chr&gt;                &lt;dbl&gt;          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n1 Obesity               35.3           46.4        6.58         18.0\n2 Cholesterol           14.4           45.9        6.94         17.7\n3 Hypertension          50.0           48.2       24.0          19.1\n\n\nThe comparison between the synthetic and original datasets shows some differences in means and standard deviations for obesity, cholesterol, and hypertension. Obesity levels in the synthetic data (Mean = 46.36, SD = 17.97) are higher than the original (Mean = 35.31, SD = 6.58), suggesting a wider distribution. Cholesterol levels also appear inflated in the synthetic dataset (Mean = 45.90 vs. 14.35), with a higher standard deviation (17.67 vs. 6.94), indicating greater variability. Hypertension levels, however, remain closer to the original data (Mean = 48.25 vs. 49.98, SD = 19.10 vs. 24.05), showing a better match.\nOverall, while hypertension is relatively well-aligned, obesity and cholesterol in the synthetic dataset deviate significantly from the original, suggesting the need for better parameter tuning to improve realism."
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About me",
    "section": "",
    "text": "Hi, I’m Murphy! I’m a first-year Epidemiology and Biostatistics PhD student and my concentration is Data Analysis and Modeling. Prior to UGA, I studied Applied Mathematics and Statistics at the University of New Mexico. There, I joined a lab where I got to use math and stats to research tick-borne diseases, and that’s where my interest in public health started! Currently, I’m working on infectious disease modeling, specifically influenza and norovirus.\n\nPrior Experience\nI have prior experience with a few coding languages (R, Python, MATLAB, a touch of SAS) with R being my preferred. I’ve completed a wide range of coursework in statistics, including Regression/ANOVA, Probability, Intro Biostatistics, and Data Analysis. I’ve worked on projects that have used Regression/ANOVA, survival analysis, spatial statistics, and time series methods. I’m really looking forward to this course as an opportunity to expand my data analysis skills, improve my workflow, and enjoy digging into some more data!\n\n\nInterests\nAfter working hours, you can usually find me practicing hot yoga. On the weekends, I love trekking the trails of northern Georgia. While I deeply miss the mountains in New Mexico, I’ve discovered some impressive waterfalls here. I also enjoy climbing and running - I ran my first half marathon in November!\n\n\nClimbing Data Analysis\nI found this cool climbing data analysis by Mark Dodd. He used self-reported climbing data to compile an analysis of climber demographics by max grade. There seems to be an issue with his link to the original data, but I found another version here. I really enjoy reading and working through data analysis examples like this—it reminds me that coding is fun!"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "# load packages\nlibrary(dslabs) # contains data for analysis\n\nWarning: package 'dslabs' was built under R version 4.4.2\n\n\n\n# look at help file for gapminder data\n#help(gapminder)\n\n# view data structure\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n# view data summary\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n# find data object type\nclass(gapminder)\n\n[1] \"data.frame\"\n\n\ngapminder is a dataframe object.\n\n\n\n\n# data containing only african countries\nafricadata &lt;- gapminder |&gt;\n  dplyr::filter(continent == \"Africa\")\n\n# view data structure\nstr(africadata)\n\n'data.frame':   2907 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n $ fertility       : num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n $ population      : num  11124892 5270844 2431620 524029 4829291 ...\n $ gdp             : num  1.38e+10 NA 6.22e+08 1.24e+08 5.97e+08 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n# view data summary\nsummary(africadata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0  \n\n\n\n# object containing only infant_mortality and life_expectancy\nobj1 &lt;- africadata |&gt;\n  dplyr::select(infant_mortality, life_expectancy)\n\n# view obj1 structure\nstr(obj1)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\n# view obj1 summary\nsummary(obj1)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\n# object containing only population and life_expectancy\nobj2 &lt;- africadata |&gt;\n  dplyr::select(population, life_expectancy)\n\n# view obj2 structure\nstr(obj2)\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n\n# view obj2 summary\nsummary(obj2)\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51                         \n\n\n\n\n\n\n# plot life expectancy as a function of infant mortality\nplot(obj1$infant_mortality, obj1$life_expectancy)\n\n\n\n\n\n\n\n# plot life expectancy as a function of population\nplot(obj2$population, obj2$life_expectancy, log = 'x')\n\n\n\n\n\n\n\n\nThe africadata object contains country-level data for different years from 1960 to 2016. The streaks seen in the second plot represent the same country changing over time.\n\n\n\n\n# filter data for years with missing infant mortality data\ninfant_na &lt;- africadata |&gt;\n  dplyr::filter(is.na(infant_mortality))\n\n# print years with missing infant mortality data\nunique(infant_na$year)\n\n [1] 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974\n[16] 1975 1976 1977 1978 1979 1980 1981 2016\n\n\n\n# create object with data from 2000 only\nafricadata_2000 &lt;- africadata |&gt;\n  dplyr::filter(year == \"2000\")\n\n# view data structure\nstr(africadata_2000)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n# view data summary\nsummary(africadata_2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0  \n\n\n\n\n\n\n# plot life expectancy as a function of infant mortality\nplot(africadata_2000$infant_mortality, africadata_2000$life_expectancy)\n\n\n\n\n\n\n\n# plot life expectancy as a function of population\nplot(africadata_2000$population, africadata_2000$life_expectancy, log = 'x')\n\n\n\n\n\n\n\n\n\n\n\n\n# linear regression of infant mortality as predictor of life expectancy\nfit1 &lt;- lm(life_expectancy ~ infant_mortality, data = africadata_2000)\n\n# print summary of fit1\nsummary(fit1)\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = africadata_2000)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      71.29331    2.42611  29.386  &lt; 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\n# linear regression of population as predictor of life expectancy\nfit2 &lt;- lm(life_expectancy ~ population, data = africadata_2000)\n\n# print summary of fit2\nsummary(fit2)\n\n\nCall:\nlm(formula = life_expectancy ~ population, data = africadata_2000)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\npopulation  2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159\n\n\nThe coefficient estimate of infant_mortality as a predictor of life_expectancy is \\(-0.189\\) with a p-value of \\(&lt;0.001\\). There is evidence to suggest a statistically significant negative association between infant mortality and life expectancy.\nThe coefficient estimate of population as a predictor of life_expectancy is \\(2.756*10^{-8}\\) with a p-value of \\(0.616\\). There is insufficient evidence to suggest an association between population size and life expectancy."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#setup",
    "href": "coding-exercise/coding-exercise.html#setup",
    "title": "R Coding Exercise",
    "section": "",
    "text": "# load packages\nlibrary(dslabs) # contains data for analysis\n\nWarning: package 'dslabs' was built under R version 4.4.2\n\n\n\n# look at help file for gapminder data\n#help(gapminder)\n\n# view data structure\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n# view data summary\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n# find data object type\nclass(gapminder)\n\n[1] \"data.frame\"\n\n\ngapminder is a dataframe object."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#data-processing",
    "href": "coding-exercise/coding-exercise.html#data-processing",
    "title": "R Coding Exercise",
    "section": "",
    "text": "# data containing only african countries\nafricadata &lt;- gapminder |&gt;\n  dplyr::filter(continent == \"Africa\")\n\n# view data structure\nstr(africadata)\n\n'data.frame':   2907 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n $ fertility       : num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n $ population      : num  11124892 5270844 2431620 524029 4829291 ...\n $ gdp             : num  1.38e+10 NA 6.22e+08 1.24e+08 5.97e+08 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n# view data summary\nsummary(africadata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0  \n\n\n\n# object containing only infant_mortality and life_expectancy\nobj1 &lt;- africadata |&gt;\n  dplyr::select(infant_mortality, life_expectancy)\n\n# view obj1 structure\nstr(obj1)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\n# view obj1 summary\nsummary(obj1)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\n# object containing only population and life_expectancy\nobj2 &lt;- africadata |&gt;\n  dplyr::select(population, life_expectancy)\n\n# view obj2 structure\nstr(obj2)\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n\n# view obj2 summary\nsummary(obj2)\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plotting",
    "href": "coding-exercise/coding-exercise.html#plotting",
    "title": "R Coding Exercise",
    "section": "",
    "text": "# plot life expectancy as a function of infant mortality\nplot(obj1$infant_mortality, obj1$life_expectancy)\n\n\n\n\n\n\n\n# plot life expectancy as a function of population\nplot(obj2$population, obj2$life_expectancy, log = 'x')\n\n\n\n\n\n\n\n\nThe africadata object contains country-level data for different years from 1960 to 2016. The streaks seen in the second plot represent the same country changing over time."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#more-data-processing",
    "href": "coding-exercise/coding-exercise.html#more-data-processing",
    "title": "R Coding Exercise",
    "section": "",
    "text": "# filter data for years with missing infant mortality data\ninfant_na &lt;- africadata |&gt;\n  dplyr::filter(is.na(infant_mortality))\n\n# print years with missing infant mortality data\nunique(infant_na$year)\n\n [1] 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974\n[16] 1975 1976 1977 1978 1979 1980 1981 2016\n\n\n\n# create object with data from 2000 only\nafricadata_2000 &lt;- africadata |&gt;\n  dplyr::filter(year == \"2000\")\n\n# view data structure\nstr(africadata_2000)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n# view data summary\nsummary(africadata_2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#more-plotting",
    "href": "coding-exercise/coding-exercise.html#more-plotting",
    "title": "R Coding Exercise",
    "section": "",
    "text": "# plot life expectancy as a function of infant mortality\nplot(africadata_2000$infant_mortality, africadata_2000$life_expectancy)\n\n\n\n\n\n\n\n# plot life expectancy as a function of population\nplot(africadata_2000$population, africadata_2000$life_expectancy, log = 'x')"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#model-fits",
    "href": "coding-exercise/coding-exercise.html#model-fits",
    "title": "R Coding Exercise",
    "section": "",
    "text": "# linear regression of infant mortality as predictor of life expectancy\nfit1 &lt;- lm(life_expectancy ~ infant_mortality, data = africadata_2000)\n\n# print summary of fit1\nsummary(fit1)\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = africadata_2000)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      71.29331    2.42611  29.386  &lt; 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\n# linear regression of population as predictor of life expectancy\nfit2 &lt;- lm(life_expectancy ~ population, data = africadata_2000)\n\n# print summary of fit2\nsummary(fit2)\n\n\nCall:\nlm(formula = life_expectancy ~ population, data = africadata_2000)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\npopulation  2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159\n\n\nThe coefficient estimate of infant_mortality as a predictor of life_expectancy is \\(-0.189\\) with a p-value of \\(&lt;0.001\\). There is evidence to suggest a statistically significant negative association between infant mortality and life expectancy.\nThe coefficient estimate of population as a predictor of life_expectancy is \\(2.756*10^{-8}\\) with a p-value of \\(0.616\\). There is insufficient evidence to suggest an association between population size and life expectancy."
  },
  {
    "objectID": "fitting-exercise/code/readme.html",
    "href": "fitting-exercise/code/readme.html",
    "title": "Code",
    "section": "",
    "text": "Code\nfitting-exercise.qmd contains all processing, eda, and analysis code"
  },
  {
    "objectID": "fitting-exercise/readme.html",
    "href": "fitting-exercise/readme.html",
    "title": "Introduction",
    "section": "",
    "text": "This folder contains a simple model fitting exercise.\n\n\ndata contains the raw data file\ncode contains all code run for this analysis"
  },
  {
    "objectID": "fitting-exercise/readme.html#description-of-contents",
    "href": "fitting-exercise/readme.html#description-of-contents",
    "title": "Introduction",
    "section": "",
    "text": "data contains the raw data file\ncode contains all code run for this analysis"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html",
    "href": "ml-models-exercise/ml-models-exercise.html",
    "title": "ml-models-exercise",
    "section": "",
    "text": "# load packages\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.4.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n\n\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tibble       3.2.1\n✔ infer        1.0.7     ✔ tidyr        1.3.1\n✔ modeldata    1.4.0     ✔ tune         1.2.1\n✔ parsnip      1.2.1     ✔ workflows    1.1.4\n✔ purrr        1.0.2     ✔ workflowsets 1.1.0\n✔ recipes      1.1.0     ✔ yardstick    1.3.1\n\n\nWarning: package 'broom' was built under R version 4.4.2\n\n\nWarning: package 'dials' was built under R version 4.4.2\n\n\nWarning: package 'infer' was built under R version 4.4.2\n\n\nWarning: package 'modeldata' was built under R version 4.4.2\n\n\nWarning: package 'parsnip' was built under R version 4.4.2\n\n\nWarning: package 'recipes' was built under R version 4.4.2\n\n\nWarning: package 'rsample' was built under R version 4.4.2\n\n\nWarning: package 'tune' was built under R version 4.4.2\n\n\nWarning: package 'workflows' was built under R version 4.4.2\n\n\nWarning: package 'workflowsets' was built under R version 4.4.2\n\n\nWarning: package 'yardstick' was built under R version 4.4.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n\n\n\n# set seed\nrdmseed &lt;- 1234\nset.seed(rdmseed)\n\n\n# load data \ndat &lt;- readRDS(here::here(\"fitting-exercise/data/mavoglurant-processed.rds\"))\n\n## make sex and race numeric\ndat$sex &lt;- as.numeric(dat$sex)\ndat$race &lt;- as.numeric(dat$race)"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#linear-model",
    "href": "ml-models-exercise/ml-models-exercise.html#linear-model",
    "title": "ml-models-exercise",
    "section": "linear model",
    "text": "linear model\n\n# fit model\nlinear_mod &lt;- linear_reg() %&gt;%\n  fit(\n    Y ~ dose + age + sex + race_recode + bmi, \n    data=dat\n    )\n\n# generate predictions\nlinear_pred &lt;- predict(linear_mod, new_data=dat)\n\n# merge predictions to data\ndat$pred_linear &lt;- linear_pred$.pred\n\n\n# get rmse\ndat %&gt;%\n  rmse(truth = Y, estimate = pred_linear)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        624.\n\n\nRMSE of the linear model is 624.\n\n# plot observed vs fitted\nggplot(dat) +\n  geom_point(aes(x=Y, y=pred_linear)) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +\n  scale_x_continuous(limits=c(0,6000)) +\n  scale_y_continuous(limits=c(0,4000))"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#lasso-regression",
    "href": "ml-models-exercise/ml-models-exercise.html#lasso-regression",
    "title": "ml-models-exercise",
    "section": "lasso regression",
    "text": "lasso regression\n\n# set seed\nset.seed(rdmseed)\n\n# recipe\ndat_rec &lt;- recipe(\n  Y ~ dose + age + sex + race_recode + bmi,\n  data=dat\n  ) %&gt;%\n  step_normalize(all_numeric(), -all_outcomes())\n\n# specify and fit models\nlasso_spec &lt;- linear_reg(penalty = 0.1, mixture = 1) %&gt;%\n  set_engine(\"glmnet\")\n\nwf &lt;- workflow() %&gt;%\n  add_recipe(dat_rec) \n\nlasso_fit &lt;- wf %&gt;%\n  add_model(lasso_spec) %&gt;%\n  fit(data=dat)\n\n# generate predictions\nlasso_pred &lt;- predict(lasso_fit, new_data = dat)\n\n# merge predictions to data\ndat$pred_lasso &lt;- lasso_pred$.pred\n\n# check variable selection\nlasso_fit %&gt;% extract_fit_parsnip() %&gt;% tidy()\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\n\nLoaded glmnet 4.1-8\n\n\n# A tibble: 6 × 3\n  term        estimate penalty\n  &lt;chr&gt;          &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)   2445.      0.1\n2 dose           714.      0.1\n3 age             74.3     0.1\n4 sex              0       0.1\n5 race_recode     45.0     0.1\n6 bmi           -245.      0.1\n\n\n\n# get rmse\ndat %&gt;%\n  rmse(truth = Y, estimate = pred_lasso)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        624.\n\n\nRMSE of the lasso regression is 624. The lasso regression and the full linear model produce almost identical predictions. The lasso penalty of 0.1 is pretty small, so it likely isn’t shrinking the coefficients much. Based on the lasso variable selection, sex is the only variable with a coefficient of zero. This means that the model is behaving similarly to the full linear model.\n\n# plot observed vs fitted\nggplot(dat) +\n  geom_point(aes(x=Y, y=pred_lasso)) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +\n  scale_x_continuous(limits=c(0,6000)) +\n  scale_y_continuous(limits=c(0,4000))"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#random-forest",
    "href": "ml-models-exercise/ml-models-exercise.html#random-forest",
    "title": "ml-models-exercise",
    "section": "random forest",
    "text": "random forest\n\n# set seed\nset.seed(rdmseed)\n\n# specify and fit models\nrf_spec &lt;- \n    rand_forest() %&gt;% \n    set_mode(\"regression\") %&gt;% \n    set_engine(\"ranger\", seed = rdmseed)\n\nrf_fit &lt;- rf_spec %&gt;%\n  fit(Y ~ dose + age + sex + race_recode + bmi, data=dat)\n\n# generate predictions\nrf_pred &lt;- predict(rf_fit, dat)\n\n# merge predictions to data\ndat$pred_rf &lt;- rf_pred$.pred\n\n\n# get rmse\ndat %&gt;%\n  rmse(truth = Y, estimate = pred_rf)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        416.\n\n\nRMSE of the random forest is 416 (361 when also including ht and wt).\n\n# plot observed vs fitted\nggplot(dat) +\n  geom_point(aes(x=Y, y=pred_rf)) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +\n  scale_x_continuous(limits=c(0,6000)) +\n  scale_y_continuous(limits=c(0,4000))\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#lasso-tuning",
    "href": "ml-models-exercise/ml-models-exercise.html#lasso-tuning",
    "title": "ml-models-exercise",
    "section": "lasso tuning",
    "text": "lasso tuning\n\nset.seed(rdmseed)\n\ntune_lasso_grid &lt;- tibble(penalty = 10^seq(-5, 2, length.out = 50))\n\ntune_lasso_spec &lt;- linear_reg(penalty = tune()) %&gt;%\n  set_engine(\"glmnet\")\n\ntune_rec &lt;- recipe(Y ~ dose + age + sex + race_recode + bmi, data = dat)\n\ntune_lasso_wf &lt;- workflow() %&gt;%\n  add_model(tune_lasso_spec) %&gt;%\n  add_recipe(tune_rec)\n\n\nlasso_tune_results &lt;- tune_grid(\n  tune_lasso_wf,\n  resamples = apparent(dat),\n  grid = tune_lasso_grid,\n  metrics=metric_set(yardstick::rmse)\n)\n\nlasso_tune_results_metrics &lt;- as.data.frame(lasso_tune_results$.metrics)\n\n\n# autoplot isn't working with the apparent function so plot manually\nggplot(lasso_tune_results_metrics, aes(x = penalty, y = .estimate)) +\n  geom_line(size=1) +\n  scale_x_log10()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#rf-tuning",
    "href": "ml-models-exercise/ml-models-exercise.html#rf-tuning",
    "title": "ml-models-exercise",
    "section": "rf tuning",
    "text": "rf tuning\n\ntune_rf_grid &lt;- grid_regular(\n  mtry(range = c(1, 7)),\n  min_n(range = c(1, 21)),\n  levels = 7\n  )\n\ntune_rf_spec &lt;- rand_forest(\n  mtry=tune(), \n  min_n=tune(), \n  trees=300\n  ) %&gt;% \n  set_mode(\"regression\") %&gt;%\n  set_engine(\"ranger\", seed=rdmseed) \n\ntune_rf_wf &lt;- workflow() %&gt;% add_model(tune_rf_spec) %&gt;% add_recipe(tune_rec)\n\n\nrf_tune_result &lt;- tune_rf_wf %&gt;% \n  tune_grid(\n    resamples=apparent(dat), \n    grid=tune_rf_grid, \n    metrics=metric_set(rmse)\n    )\n\nWarning: package 'ranger' was built under R version 4.4.2\n\n\n→ A | warning: 6 columns were requested but there were 5 predictors in the data. 5 will be used.\n\n\nThere were issues with some computations   A: x1\n\n\n→ B | warning: 7 columns were requested but there were 5 predictors in the data. 5 will be used.\n\n\nThere were issues with some computations   A: x1\nThere were issues with some computations   A: x2   B: x1\nThere were issues with some computations   A: x6   B: x6\nThere were issues with some computations   A: x7   B: x7\n\nrf_tune_result_metrics &lt;- as.data.frame(rf_tune_result$.metrics)\n\n\n# autoplot isn't working with the apparent function so plot manually\nggplot(rf_tune_result_metrics, aes(x=mtry, y = min_n, fill = .estimate)) +\n  geom_tile() +\n  labs(fill = \"rmse\")"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#lasso-cv-tuning",
    "href": "ml-models-exercise/ml-models-exercise.html#lasso-cv-tuning",
    "title": "ml-models-exercise",
    "section": "lasso cv tuning",
    "text": "lasso cv tuning\n\nset.seed(rdmseed)\n\ntune_lasso_grid &lt;- tibble(penalty = 10^seq(-5, 2, length.out = 50))\n\ntune_lasso_spec &lt;- linear_reg(penalty = tune()) %&gt;%\n  set_engine(\"glmnet\")\n\ntune_rec &lt;- recipe(Y ~ dose + age + sex + race_recode + bmi, data = dat)\n\ntune_lasso_wf &lt;- workflow() %&gt;%\n  add_model(tune_lasso_spec) %&gt;%\n  add_recipe(tune_rec)\n\n\nlasso_tune_cv &lt;- tune_grid(\n  tune_lasso_wf,\n  resamples = vfold_cv(dat, v=5, repeats=5),\n  grid = tune_lasso_grid,\n  metrics=metric_set(yardstick::rmse)\n)\n\nautoplot(lasso_tune_cv)"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#rf-cv-tuning",
    "href": "ml-models-exercise/ml-models-exercise.html#rf-cv-tuning",
    "title": "ml-models-exercise",
    "section": "rf cv tuning",
    "text": "rf cv tuning\n\nrf_tune_cv &lt;- tune_rf_wf %&gt;% \n  tune_grid(\n    resamples=vfold_cv(dat, v=5, repeats=5), \n    grid=tune_rf_grid, \n    metrics=metric_set(rmse)\n    )\n\n→ A | warning: 6 columns were requested but there were 5 predictors in the data. 5 will be used.\n\n\nThere were issues with some computations   A: x1\n\n\n→ B | warning: 7 columns were requested but there were 5 predictors in the data. 5 will be used.\n\n\nThere were issues with some computations   A: x1\nThere were issues with some computations   A: x2   B: x1\nThere were issues with some computations   A: x8   B: x7\nThere were issues with some computations   A: x14   B: x13\nThere were issues with some computations   A: x18   B: x18\nThere were issues with some computations   A: x24   B: x23\nThere were issues with some computations   A: x30   B: x29\nThere were issues with some computations   A: x36   B: x35\nThere were issues with some computations   A: x40   B: x39\nThere were issues with some computations   A: x43   B: x42\nThere were issues with some computations   A: x45   B: x44\nThere were issues with some computations   A: x48   B: x47\nThere were issues with some computations   A: x51   B: x50\nThere were issues with some computations   A: x53   B: x53\nThere were issues with some computations   A: x56   B: x55\nThere were issues with some computations   A: x58   B: x58\nThere were issues with some computations   A: x61   B: x60\nThere were issues with some computations   A: x64   B: x63\nThere were issues with some computations   A: x66   B: x65\nThere were issues with some computations   A: x69   B: x68\nThere were issues with some computations   A: x71   B: x71\nThere were issues with some computations   A: x74   B: x73\nThere were issues with some computations   A: x77   B: x76\nThere were issues with some computations   A: x79   B: x78\nThere were issues with some computations   A: x82   B: x81\nThere were issues with some computations   A: x85   B: x84\nThere were issues with some computations   A: x87   B: x86\nThere were issues with some computations   A: x90   B: x89\nThere were issues with some computations   A: x93   B: x92\nThere were issues with some computations   A: x95   B: x94\nThere were issues with some computations   A: x98   B: x97\nThere were issues with some computations   A: x100   B: x100\nThere were issues with some computations   A: x103   B: x102\nThere were issues with some computations   A: x106   B: x105\nThere were issues with some computations   A: x108   B: x107\nThere were issues with some computations   A: x111   B: x110\nThere were issues with some computations   A: x114   B: x113\nThere were issues with some computations   A: x116   B: x115\nThere were issues with some computations   A: x119   B: x118\nThere were issues with some computations   A: x122   B: x121\nThere were issues with some computations   A: x124   B: x123\nThere were issues with some computations   A: x127   B: x126\nThere were issues with some computations   A: x130   B: x129\nThere were issues with some computations   A: x132   B: x131\nThere were issues with some computations   A: x135   B: x134\nThere were issues with some computations   A: x138   B: x137\nThere were issues with some computations   A: x141   B: x140\nThere were issues with some computations   A: x143   B: x142\nThere were issues with some computations   A: x145   B: x145\nThere were issues with some computations   A: x148   B: x147\nThere were issues with some computations   A: x151   B: x150\nThere were issues with some computations   A: x154   B: x153\nThere were issues with some computations   A: x156   B: x156\nThere were issues with some computations   A: x162   B: x161\nThere were issues with some computations   A: x166   B: x166\nThere were issues with some computations   A: x170   B: x170\nThere were issues with some computations   A: x175   B: x175\n\nautoplot(rf_tune_cv)"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "I will be reproducing a visualization and table from data which can be found here. The full article by Hannah Ritchie is in the Our World in Data journal. The data was free for download along with an image of the graph, which I’ve pasted below."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#ais-attempt",
    "href": "presentation-exercise/presentation-exercise.html#ais-attempt",
    "title": "Presentation Exercise",
    "section": "AI’s Attempt",
    "text": "AI’s Attempt\nPer the instructions, I asked ChatGPT to write me code that will reproduce the figure. I uploaded the above png and wrote “I have the data in this graph. Write R code to recreate it”. I received the following output.\n\nlibrary(ggplot2)\n\n# Data\nfood_items &lt;- c(\"Beef (beef herd)\", \"Dark Chocolate\", \"Lamb & Mutton\", \"Beef (dairy herd)\", \"Coffee\", \n                \"Shrimps (farmed)\", \"Cheese\", \"Fish (farmed)\", \"Pig Meat\", \"Poultry Meat\", \"Palm Oil\", \n                \"Olive Oil\", \"Eggs\", \"Rice\", \"Sunflower Oil\", \"Tofu\", \"Milk\", \"Tomatoes\", \"Peas\", \"Bananas\")\n\ntotal_emissions &lt;- c(99, 47, 40, 33, 29, 27, 24, 14, 12, 9.9, 7.3, 5.7, 4.7, 4.5, 3.6, 3.2, 3.2, 2.1, 0.98, 0.89)\n\ncategories &lt;- c(\"Land use change\", \"Farm\", \"Animal feed\", \"Processing\", \"Transport\", \"Retail\", \"Packaging\", \"Losses\")\n\n# Example breakdown of emissions (these values should be adjusted based on actual data)\nland_use &lt;- c(60, 20, 25, 15, 10, 12, 8, 5, 6, 4, 3, 2, 1, 1, 1, 1, 1, 0.5, 0.3, 0.2)\nfarm &lt;- c(20, 10, 8, 10, 12, 8, 6, 4, 3, 2.5, 2, 1.5, 1.2, 1, 0.8, 0.6, 0.5, 0.4, 0.3, 0.2)\nanimal_feed &lt;- c(10, 5, 4, 5, 3, 2, 2, 1, 2, 1.5, 1, 0.8, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02)\nprocessing &lt;- c(3, 5, 2, 1.5, 2, 2, 1.5, 1.2, 0.8, 0.6, 0.5, 0.4, 0.3, 0.2, 0.2, 0.15, 0.12, 0.1, 0.08, 0.05)\ntransport &lt;- c(2, 5, 1, 0.8, 1, 1.5, 1, 0.9, 0.7, 0.6, 0.4, 0.3, 0.25, 0.2, 0.18, 0.15, 0.1, 0.08, 0.05, 0.03)\nretail &lt;- c(2, 1, 0.5, 0.4, 0.3, 0.2, 0.2, 0.1, 0.1, 0.08, 0.05, 0.04, 0.03, 0.02, 0.015, 0.01, 0.008, 0.006, 0.004, 0.002)\npackaging &lt;- c(1, 0.8, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.08, 0.05, 0.04, 0.03, 0.02, 0.015, 0.01, 0.008, 0.006, 0.004, 0.002)\nlosses &lt;- c(1, 0.5, 0.3, 0.2, 0.2, 0.15, 0.1, 0.08, 0.06, 0.05, 0.03, 0.025, 0.02, 0.015, 0.012, 0.01, 0.008, 0.006, 0.004, 0.002)\n\n# Create a data frame\ndf &lt;- data.frame(Food = rep(food_items, each = 8), \n                 Category = rep(categories, times = length(food_items)), \n                 Emissions = c(land_use, farm, animal_feed, processing, transport, retail, packaging, losses))\n\n# Plot the data\nggplot(df, aes(x = Emissions, y = reorder(Food, -Emissions), fill = Category)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Food: Greenhouse Gas Emissions Across the Supply Chain\",\n       x = \"Emissions (kg CO₂eq per kg of food)\",\n       y = \"Food Item\") +\n  scale_fill_manual(values = c(\"#8DA0CB\", \"#E78AC3\", \"#A6D854\", \"#FFD92F\", \"#E5C494\", \"#B3B3B3\", \"#66C2A5\", \"#FC8D62\")) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThat’s pretty solid if you ask me. The figure could use some cleaning up on the labels, text, and colors. It also of course needs to consider the real data. I don’t foresee ChatGPT improving the figure much more without some user-machine wrangling so I’m going to take over from here. Anything AI can do, I can (theoretically) do😊."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#mjs-attempt",
    "href": "presentation-exercise/presentation-exercise.html#mjs-attempt",
    "title": "Presentation Exercise",
    "section": "MJ’s Attempt",
    "text": "MJ’s Attempt\n\nSetup\n\n# load packages\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\n\n# load data\ndat &lt;- read.csv(\n  here::here(\"presentation-exercise/data/food-emissions-supply-chain.csv\")\n  )\n\n\n\nData processing\n\ndat1 &lt;- dat %&gt;%\n  rename(\n    food_items = Entity,\n    land_use = food_emissions_land_use,\n    farm = food_emissions_farm,\n    animal_feed = food_emissions_animal_feed,\n    processing = food_emissions_processing,\n    transport = food_emissions_transport,\n    retail = food_emissions_retail,\n    packaging = food_emissions_packaging,\n    losses = food_emissions_losses\n  ) %&gt;%\n  select(-Code, -Year) %&gt;% # remove unused columns\n  mutate(\n    total_emissions = rowSums(select(\n      ., land_use, farm, animal_feed, processing, \n      transport, retail, packaging, losses))\n  )\n\n# pivot longer for plotting bars\ndat2 &lt;- dat1 %&gt;%\n  # data includes more items then shown on graph\n  filter(\n    food_items %in% c(\n      \"Beef (beef herd)\", \"Dark Chocolate\", \"Lamb & Mutton\", \n      \"Beef (dairy herd)\", \"Coffee\", \"Shrimps (farmed)\", \"Cheese\", \n      \"Fish (farmed)\", \"Pig Meat\", \"Poultry Meat\", \"Palm Oil\", \n      \"Olive Oil\", \"Eggs\", \"Rice\", \"Sunflower Oil\", \"Tofu\", \"Milk\", \n      \"Tomatoes\", \"Peas\", \"Bananas\"\n    )\n    ) %&gt;%\n  tidyr::pivot_longer(\n    cols = -food_items,\n    names_to = \"category\",\n    values_to = \"emissions\"\n  ) \n\n# remove \"total\" row, clean up labels\ndat3 &lt;- dat2 %&gt;%\n  filter(\n    category != \"total_emissions\"\n  ) %&gt;%\n  # clean category labels\n  mutate(\n    category = case_when(\n      category == \"land_use\" ~ \"Land use change\",\n      category == \"farm\" ~ \"Farm\",\n      category == \"animal_feed\" ~ \"Animal feed\",\n      category == \"processing\" ~ \"Processing\",\n      category == \"transport\" ~ \"Transport\",\n      category == \"retail\" ~ \"Retail\", \n      category == \"packaging\" ~ \"Packaging\",\n      category == \"losses\" ~ \"Losses\", \n      TRUE ~ category\n    ), \n    # for ordering on plot\n    category = factor(category, levels = c(\n      \"Losses\", \"Packaging\", \"Retail\", \"Transport\", \"Processing\", \n      \"Animal feed\", \"Farm\", \"Land use change\"\n    ))\n  )\n\n# reserve a separate dataset with total emissions\ndat4 &lt;- dat2 %&gt;%\n  filter(\n    category == \"total_emissions\"\n  )\n\n\n\nPlot the data\n\nggplot(dat3, aes(x = emissions, y = reorder(food_items, emissions), fill = category)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Food: greenhouse gas emissions across the supply chain\",\n       subtitle = \"Greenhouse gas emissions are measured in kilograms of carbon dioxide-equivalents (CO2eq) per kilogram of food.\",\n       x = NULL,\n       y = NULL,\n       fill = NULL\n       )+\n  scale_fill_manual(values = c(\"darkseagreen\", \"burlywood\", \"orange\", \"cornflowerblue\", \"indianred\", \"yellow\", \"lightslategray\", \"lavender\"),\n                    limits = rev(levels(dat3$category))) +\n  theme_minimal() +\n  theme(legend.position = \"top\",\n        plot.title = element_text(size = 20),\n        legend.text = element_text(size = 11),\n        axis.text.y = element_text(size = 12),\n        panel.grid = element_blank()) +\n  guides(fill = guide_legend(nrow = 1, byrow = TRUE))+\n  geom_text(data = dat4, \n            aes(x = emissions, y = food_items, \n                label = paste(round(emissions, 1), \"kg\")), \n            hjust = -0.05,\n            size = 3)"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#setup-1",
    "href": "presentation-exercise/presentation-exercise.html#setup-1",
    "title": "Presentation Exercise",
    "section": "Setup",
    "text": "Setup\n\n# load packages\nlibrary(gt)\n\nWarning: package 'gt' was built under R version 4.4.2\n\nlibrary(gtsummary)\n\nWarning: package 'gtsummary' was built under R version 4.4.2"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#data-processing-1",
    "href": "presentation-exercise/presentation-exercise.html#data-processing-1",
    "title": "Presentation Exercise",
    "section": "Data processing",
    "text": "Data processing\n\n# put food items into categories\ndat5 &lt;- dat1 %&gt;%\n  mutate(\n    food_group = case_when(\n      food_items %in% c(\"Beef (beef herd)\", \"Beef (dairy herd)\",\"Lamb & Mutton\",\n                        \"Pig Meat\", \"Poultry Meat\") ~ \"Land Animals\",\n      food_items %in% c(\"Fish (farmed)\", \"Shrimps (farmed)\") ~ \"Water Animals\",\n      food_items %in% c(\"Cheese\", \"Eggs\", \"Milk\") ~ \"Animal By-products\",\n      food_items %in% c(\"Apples\", \"Bananas\", \"Berries & Grapes\", \"Citrus Fruit\",\n                        \"Other Fruit\", \"Tomatoes\") ~ \"Fruits\",\n      food_items %in% c(\"Root Vegetables\", \"Onions & Leeks\", \"Brassicas\",\n                        \"Other Vegetables\", \"Potatoes\", \n                        \"Cassava\") ~ \"Vegetables\",\n      food_items %in% c(\"Maize\", \"Barley\", \"Rice\", \"Wheat & Rye\", \"Oatmeal\",\n                        \"Other Pulses\", \"Peas\") ~ \"Legumes & Grains\",\n      food_items %in% c(\"Beet Sugar\", \"Cane Sugar\") ~ \"Sugars\",\n      food_items %in% c(\"Groundnuts\", \"Nuts\") ~ \"Nuts & Seeds\",\n      food_items %in% c(\"Olive Oil\", \"Rapeseed Oil\", \"Soybean Oil\", \n                        \"Sunflower Oil\", \"Palm Oil\") ~ \"Oils\",\n      food_items %in% c(\"Soy milk\", \"Tofu\") ~ \"Plant-based Alternatives\",\n      food_items %in% c(\"Coffee\", \"Wine\", \"Dark Chocolate\") ~ \"Misc\",\n      TRUE ~ \"Other\"\n    )\n  )\n\n\n# summary stats\nformat_ci &lt;- function(df, d = 1) {\n    fmt_str &lt;- paste0(\"%.\", d, \"f\")\n    out &lt;- paste0(\n        sprintf(fmt_str, df$y), \" (\",\n        sprintf(fmt_str, df$ymin), \", \",\n        sprintf(fmt_str, df$ymax), \")\"\n    )\n    \n    return(out)\n}\n\n# dataframe including summary statistics for table\ndat6 &lt;- dat5 %&gt;%\n  group_by(food_group) %&gt;%\n  summarise(\n    n = n(),\n    land = ggplot2::mean_cl_boot(land_use, B=1000) %&gt;% format_ci(),\n    farm = ggplot2::mean_cl_boot(farm, B=1000) %&gt;% format_ci(),\n    animal = ggplot2::mean_cl_boot(animal_feed, B=1000) %&gt;% format_ci(),\n    processing = ggplot2::mean_cl_boot(processing, B=1000) %&gt;% format_ci(),\n    transport = ggplot2::mean_cl_boot(transport, B=1000) %&gt;% format_ci(),\n    retail = ggplot2::mean_cl_boot(retail, B=1000) %&gt;% format_ci(),\n    pack = ggplot2::mean_cl_boot(packaging, B=1000) |&gt; format_ci(),\n    losses = ggplot2::mean_cl_boot(losses, B=1000) |&gt; format_ci(),\n  ) %&gt;%\n  mutate(\n    symbol = c(\n      \"cheese\", \"apple-whole\", \"burger\", \"wheat-awn\", \"wine-glass\", \"seedling\",\n      \"bottle-droplet\", \"leaf\", \"cubes-stacked\", \"carrot\", \"fish\"\n    )) %&gt;%\n  select(\n    food_group, symbol, n, land, farm, animal, processing, \n    transport, retail, pack, losses\n  )"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#create-table",
    "href": "presentation-exercise/presentation-exercise.html#create-table",
    "title": "Presentation Exercise",
    "section": "Create table",
    "text": "Create table\n\ntab &lt;- dat6 %&gt;%\n  gt(rowname_col = \"food_group\") %&gt;%\n  # label columns\n  cols_label(\n    symbol = \"\",\n    land = \"Land use change\",\n        farm = \"Farm\",\n        animal = \"Animal feed\",\n        processing = \"Processing\",\n        transport = \"Transport\",\n        retail = \"Retail\",\n        pack = \"Packaging\",\n        losses = \"Losses\"\n  ) %&gt;%\n  # center cell contents\n  cols_align(align = \"center\", columns = -food_group) %&gt;%\n  \n  # aesthetic specifics ========================================================\n  \n  tab_header(\n    title = md(paste(\"Average Emissions\", \n                     fontawesome::fa(\"fire\"), \"by Food Group\"))\n    )%&gt;%\n  \n  tab_footnote(\n    footnote = \"Mean (95% bootstrap CI; 1000 resamples)\",\n    locations = cells_column_labels(columns = c(land, farm, animal, processing,\n                                                transport, retail, pack, losses))\n  ) %&gt;%\n  \n  # stub and label text\n   tab_style(\n    style = cell_text(\n      size = \"smaller\",\n      weight = \"bold\",\n      transform = \"uppercase\"\n    ),\n    locations = list(cells_column_labels(), cells_stub())\n  ) %&gt;%\n  \n  # cell text\n  tab_style(\n    style = cell_text(\n      size = \"smaller\"),\n    locations = cells_body()\n   ) %&gt;%\n  \n  # title and cell fill\n   tab_style(\n    style = cell_fill(color = \"gray98\"),\n    locations = list(cells_title(), cells_body(columns = -symbol))\n  ) %&gt;%\n  \n  # symbol specific fill\n  tab_style(\n    style = cell_fill(color = \"darksalmon\" %&gt;% adjust_luminance(steps = 1)),\n    locations = cells_body(columns = symbol)\n  ) %&gt;%\n  \n  # insert symbols\n   fmt_icon(columns = symbol) %&gt;%\n  \n  # caption\n   tab_caption(caption = md(\"Average greenhouse gas emissions (CO2kg) per kilogram of food product, categorized by food group. Mean emission values are included, along with the corresponding 95% bootstrap confidence intervals, for each of the key stages in the food production and supply chain: land use change, farming, animal feed, processing, transport, retail, packaging, and losses.\")) %&gt;%\n  \n  # size adjustments\n   cols_width(\n     symbol ~ px(25),\n     n ~ px(25)\n  ) %&gt;%\n  tab_options(table.font.size = 14)\n\n# print table\ntab\n\n\n\n\n\nAverage greenhouse gas emissions (CO2kg) per kilogram of food product, categorized by food group. Mean emission values are included, along with the corresponding 95% bootstrap confidence intervals, for each of the key stages in the food production and supply chain: land use change, farming, animal feed, processing, transport, retail, packaging, and losses.\n\n\n\n\nAverage Emissions\n\n\n\nby Food Group\n\n\n\n\nn\nLand use change1\nFarm1\nAnimal feed1\nProcessing1\nTransport1\nRetail1\nPackaging1\nLosses1\n\n\n\n\nAnimal By-products\n\n\n\nCheese\n\n\n\n\n3\n1.9 (0.5, 4.5)\n5.3 (1.3, 13.1)\n1.6 (0.2, 2.4)\n0.3 (0.0, 0.7)\n0.1 (0.1, 0.1)\n0.2 (0.0, 0.3)\n0.1 (0.1, 0.2)\n1.0 (0.2, 2.6)\n\n\nFruits\n\n\n\nApple Whole\n\n\n\n\n6\n0.1 (-0.1, 0.2)\n0.4 (0.3, 0.6)\n0.0 (0.0, 0.0)\n0.0 (0.0, 0.0)\n0.2 (0.1, 0.2)\n0.0 (0.0, 0.0)\n0.1 (0.0, 0.1)\n0.3 (0.1, 0.4)\n\n\nLand Animals\n\n\n\nBurger\n\n\n\n\n5\n6.2 (1.2, 14.8)\n21.7 (5.7, 38.6)\n3.2 (2.7, 3.8)\n1.2 (0.7, 1.6)\n0.5 (0.4, 0.6)\n0.3 (0.2, 0.3)\n0.4 (0.3, 0.4)\n5.5 (2.0, 9.8)\n\n\nLegumes & Grains\n\n\n\nWheat Awn\n\n\n\n\n7\n0.1 (-0.0, 0.2)\n1.3 (0.6, 2.1)\n0.0 (0.0, 0.0)\n0.1 (0.0, 0.1)\n0.1 (0.1, 0.1)\n0.1 (0.0, 0.1)\n0.2 (0.1, 0.3)\n0.2 (0.1, 0.4)\n\n\nMisc\n\n\n\nWine Glass\n\n\n\n\n3\n9.9 (-0.1, 25.8)\n6.0 (0.6, 10.8)\n0.0 (0.0, 0.0)\n0.4 (0.1, 0.6)\n0.1 (0.1, 0.1)\n0.0 (0.0, 0.1)\n1.1 (0.7, 1.7)\n8.2 (0.2, 12.9)\n\n\nNuts & Seeds\n\n\n\nSeedling\n\n\n\n\n2\n-1.4 (-3.3, 0.5)\n2.5 (1.6, 3.4)\n0.0 (0.0, 0.0)\n0.2 (0.1, 0.4)\n0.1 (0.1, 0.1)\n0.0 (0.0, 0.0)\n0.1 (0.1, 0.1)\n0.2 (-0.0, 0.5)\n\n\nOils\n\n\n\nBottle Droplet\n\n\n\n\n5\n1.1 (-0.0, 2.3)\n2.2 (1.7, 3.0)\n0.0 (0.0, 0.0)\n0.5 (0.2, 0.8)\n0.2 (0.2, 0.3)\n0.0 (0.0, 0.0)\n0.8 (0.8, 0.8)\n0.4 (0.3, 0.6)\n\n\nPlant-based Alternatives\n\n\n\nLeaf\n\n\n\n\n2\n0.6 (0.2, 1.0)\n0.3 (0.1, 0.5)\n0.0 (0.0, 0.0)\n0.5 (0.2, 0.8)\n0.1 (0.1, 0.2)\n0.3 (0.3, 0.3)\n0.1 (0.1, 0.2)\n0.2 (0.1, 0.3)\n\n\nSugars\n\n\n\nCubes Stacked\n\n\n\n\n2\n0.6 (0.0, 1.3)\n0.5 (0.5, 0.5)\n0.0 (0.0, 0.0)\n0.1 (0.0, 0.2)\n0.7 (0.6, 0.8)\n0.0 (0.0, 0.0)\n0.1 (0.1, 0.1)\n0.4 (0.3, 0.5)\n\n\nVegetables\n\n\n\nCarrot\n\n\n\n\n6\n0.1 (0.0, 0.3)\n0.2 (0.2, 0.2)\n0.0 (0.0, 0.0)\n0.0 (0.0, 0.0)\n0.1 (0.1, 0.1)\n0.0 (0.0, 0.0)\n0.0 (0.0, 0.0)\n0.1 (0.1, 0.2)\n\n\nWater Animals\n\n\n\nFish\n\n\n\n\n2\n0.8 (0.3, 1.2)\n10.8 (8.1, 13.5)\n2.9 (1.8, 4.0)\n0.0 (0.0, 0.0)\n0.3 (0.2, 0.3)\n0.2 (0.1, 0.4)\n0.3 (0.1, 0.5)\n4.9 (2.0, 7.8)\n\n\n\n1 Mean (95% bootstrap CI; 1000 resamples)"
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at C:/Users/murph/Documents/Github/murphyjohn-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(here) #to set paths\n\nhere() starts at C:/Users/murph/Documents/Github/murphyjohn-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                         `Allowed Values`\n  &lt;chr&gt;           &lt;chr&gt;                                         &lt;chr&gt;           \n1 Height          \"height in centimeters\"                       numeric value &gt;…\n2 Weight          \"weight in kilograms\"                         numeric value &gt;…\n3 Gender          \"identified gender (male/female/other)\"       M/F/O/NA        \n4 VO2 Max         \"maximal oxygen consumption\"                  numeric value &gt;…\n5 Favorite legume \"patient-reported response to the question \\… lentils/chickpe…\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height            &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"16…\n$ Weight            &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 5…\n$ Gender            &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"…\n$ `VO2 Max`         &lt;dbl&gt; 35, 40, 39, 48, 99, 10, 37, 25, 50, 44, 32, 36, 29, …\n$ `Favorite Legume` &lt;chr&gt; \"lentils\", \"chickpeas\", \"lentils\", \"peas\", \"runner b…\n\nsummary(rawdata)\n\n    Height              Weight          Gender             VO2 Max     \n Length:14          Min.   :  45.0   Length:14          Min.   :10.00  \n Class :character   1st Qu.:  55.0   Class :character   1st Qu.:30.50  \n Mode  :character   Median :  70.0   Mode  :character   Median :36.50  \n                    Mean   : 602.7                      Mean   :39.57  \n                    3rd Qu.:  90.0                      3rd Qu.:43.00  \n                    Max.   :7000.0                      Max.   :99.00  \n                    NA's   :1                                          \n Favorite Legume   \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender `VO2 Max` `Favorite Legume`\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;            \n1 180        80 M             35 lentils          \n2 175        70 O             40 chickpeas        \n3 sixty      60 F             39 lentils          \n4 178        76 F             48 peas             \n5 192        90 NA            99 runner beans     \n6 6          55 F             10 chickpeas        \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFavorite Legume\n0\n1\n4\n12\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55.0\n70.0\n90\n7000\n▇▁▁▁▁\n\n\nVO2 Max\n0\n1.00\n39.57\n19.84\n10\n30.5\n36.5\n43\n99\n▂▇▂▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFavorite Legume\n0\n1\n4\n12\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nVO2 Max\n0\n1.00\n39.62\n20.65\n10\n30.00\n36\n44\n99\n▂▇▂▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFavorite Legume\n0\n1\n4\n12\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nVO2 Max\n0\n1.00\n39.62\n20.65\n10\n30.00\n36\n44\n99\n▂▇▂▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFavorite Legume\n0\n1\n4\n12\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nVO2 Max\n0\n1\n39.91\n22.45\n10\n29.5\n36\n44\n99\n▂▇▂▁▁\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nFavorite Legume\n0\n1\n4\n12\n0\n4\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nVO2 Max\n0\n1\n39.91\n22.45\n10\n29.5\n36\n44\n99\n▂▇▂▁▁\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nFavorite Legume\n0\n1\n4\n9\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nVO2 Max\n0\n1\n32.22\n10.70\n10\n29\n35\n37\n48\n▂▂▃▇▂\n\n\n\n\n\n\n# Rename variables \nd5 &lt;- d4 %&gt;% dplyr::rename(legume = `Favorite Legume`,\n                           vo2_max = `VO2 Max`)\n\n#change Favorite Legume column to a factor\nd5$legume &lt;- as.factor(d5$legume)  \nskimr::skim(d5)\n\n\nData summary\n\n\nName\nd5\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\nlegume\n0\n1\nFALSE\n3\nchi: 5, len: 2, pea: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nvo2_max\n0\n1\n32.22\n10.70\n10\n29\n35\n37\n48\n▂▂▃▇▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d5\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "Shaun van den Hurk contributed to this exercise.\nThe structure below is one possible setup for a data analysis project (including the course project). For a manuscript, adjust as needed. You don’t need to have exactly these sections, but the content covering those sections should be addressed.\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats.\nWarning: package 'knitr' was built under R version 4.4.2"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nThe data contains measured height, weight, and VO2 Max values along with self-reported gender and favorite legume."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nfactor\nlegume\n0\n1\nFALSE\n3\nchi: 5, len: 2, pea: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nnumeric\nvo2_max\n0\n1\nNA\nNA\nNA\n32.22222\n10.69787\n10\n29\n35\n37\n48\n▂▂▃▇▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Murphy John's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "synthetic-data-exercise/synthetic-data-exercise.html",
    "href": "synthetic-data-exercise/synthetic-data-exercise.html",
    "title": "Synthetic Data Generation and Exploration",
    "section": "",
    "text": "For this exercise, I am going to simulate simple data from a (hypothetical) vaccine cohort of individuals who received various doses of a vaccine. Samples were collected and a specific antibody was measured on days 0, 3, 5, 7, 14, 21, 28, and 35. The following variables are to be included: id, age, dose, days, titer. Brief descriptions of the variables are as follows:\n\nid is an identifier for each participant\nage is the participant’s age at day 0\ndose is the numerical dose of vaccine for which the individual received in micrograms (mcg) (10, 100, 1000)\ndays represents the number of days since vaccination on which the sample was collected\ntiter is the measured amount of antibody in the sample\n\nThe simulation assumes the following:\n\nThe immune response follows a logistic growth function up to a peak, followed by an exponential decay.\nOlder individuals have a weaker boost in response to vaccination.\nBaseline titers (day 0) are independent of dose and vary between individuals.\nIndividual variation is present in peak titer, growth rate, decay rate, and peak timing.\nTiters are strictly positive."
  },
  {
    "objectID": "synthetic-data-exercise/synthetic-data-exercise.html#general",
    "href": "synthetic-data-exercise/synthetic-data-exercise.html#general",
    "title": "Synthetic Data Generation and Exploration",
    "section": "General",
    "text": "General\n\n# load packages\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)"
  },
  {
    "objectID": "synthetic-data-exercise/synthetic-data-exercise.html#assign-parameters",
    "href": "synthetic-data-exercise/synthetic-data-exercise.html#assign-parameters",
    "title": "Synthetic Data Generation and Exploration",
    "section": "Assign parameters",
    "text": "Assign parameters\n\n# Set seed for reproducibility\nset.seed(123)\n\n# number of individuals\nN &lt;- 100\n\n# assign random ages\nages &lt;- sample(18:80, N, replace = TRUE)\n\n# vaccine doses\ndose &lt;- c(10, 100, 1000)\n\n# measurement times\ndays &lt;- c(0, 3, 5, 7, 14, 21, 28, 35) \n\n# assign doses\ndoses &lt;- rep(dose, length.out = N)\n\n# categorical dose variable\ndose_cat &lt;- if_else(\n  doses == 10, \"low\", \n  if_else(\n    doses == 100, \"medium\", \"high\"\n  )\n)"
  }
]